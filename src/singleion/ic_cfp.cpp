/* ic_cfp.cpp
 *
 * Calculates the coefficient of fractional parentage from a group theoretical basis, after the methods of, and 
 * using tables initially derived by chain calculations of Racah. 
 *
 * Functions:
 *    double racah_ulf(qG2 U, orbital L, qG2 Up, orbital Lp);                   // Calculates (UL|U'L'+f)
 *    double racah_wupf(qR7 W, qG2 U, qR7 Wp, qG2 Up);                          // Calculates (WU|W'U'+f)
 *    double racah_cfp(int n, qG2 U, int v, int S2, orbital L, qG2 Up, int vp,
 *                       int S2p, orbital Lp);
 *    double racah_cfp(int n, std::string child, std::string parent);           // Calculates the coeff. fractional parentage.
 *    double racah_cfp(int n, int v, int S2, orbital L, int vp, int S2p,        // cfp for d-electrons
 *                       orbital Lp);
 *    std::vector<cfpls> racah_parents(int n, int v, qG2 U, int S2, orbital L); // Calculates the cfp's of all the parents
 *    std::vector<cfpls> racah_parents(int n, std::string state);               //    of a particular state.
 *    std::vector<cfpls> racah_parents(int n, int v, int S2, orbital L);        // Calc. the cfp's of all parents for d-elec.
 *
 * This file is part of the ic1ionmodule of the McPhase package, calculating the single-ion properties of a rare
 * earth or actinide ion in intermediate coupling.
 *
 * (c) 2008 Duc Le - duc.le@ucl.ac.uk
 * This program is licensed under the GNU General Purpose License, version 2. Please see the COPYING file
 */

#include "ic_states.hpp"
#include <cmath>

namespace libMcPhase {

// --------------------------------------------------------------------------------------------------------------- //
// Looks up the value of the factor (UL|U'L'+f), after Racah, Wybourne, and Allison
// Tables from Racah IV, Phys. Rev. 76 (1949) 1352 for tableIV (t1,t2,t3), Wybourne, J. Chem. Phys. 36 (1961) 2295 
// for table IIb-c (t4,t5), and Allison, Comp. Phys. Comm. 8 (1974) 246 (acry1-5)
// --------------------------------------------------------------------------------------------------------------- //
double racah_ulf(qG2 U, orbital L, qG2 Up, orbital Lp)
{
   double ulf=0;
   int id=-1;

   if(Up.isequal(00) && Lp==S && U.isequal(10) && L==F) { ulf = 1.; }             // Column 1 of Table IV, Racah IVa.
   else if(Up.u1==0 && Up.u2==0 && Lp==S && U.u1==1 && U.u2==0 && L==F) { ulf = 1.; } //   ditto - to overcome isequal bug
   else if(Up.isequal(10) && Lp==3)                                                 // Column 2 of Table IV, Racah IVa. 
   {
      if((U.isequal(10)&&L==3) || (U.isequal(11)&&(L==1||L==5)) || (U.isequal(20)&&(L==2||L==4||L==6))) { ulf = 1.; }
      else if(U.isequal(00) && L==0) { ulf = -1.; }
   }
   else if(Up.isequal(11) || Up.isequal(20) || Up.isequal(21))
   {
      // U' | (11)  |       |       (20)       |          |               (21)               |                  L  U
      // L' P       H       D        G         I       [  D       F      G      H     K      L
      double t[]= {0,0,     0,       0,        0,         0,      0,     0,     0,    0,     0,  //           % S (00)
          3./14,  11./14, -5./27,   -1./3,  -13./27,      0,      0,     0,     0,    0,     0,  //           % F (10)
            0,      0,    10./21,  -11./21,    0,       220,   -539,  -585,     0,    0,     0,  //]./ 1344;  % P (11)
            0,      0,    20./189,  65./231,-182./297, -270,    147,  -297,  1078, 1470, -1666,  //]./ 4928;  % H
         -27./49,-22./49,-16./49,   33./49,    0,      8910,   8085,   351,-14014,    0,     0,  //]./ 31360; % D (20)
          33./98,-65./98, 55./147,-125./539, 13./33,    330,    147,  1287,  1078,-1470,     0,  //]./ 4312;  % G
            0,      1.,     0,       3./11,   8./11,      0,  -1911,  1485,   220, 4590, 10098,  //]./ 18304; % I
         -22./49, 27./49, 33./49,   16./49,    0,       375,   1960, -1144,  1911,    0,     0,  //]./ 5390;  % D (21)
         -11./14,  3./14,-55./126,  -8./77,  91./198,   -40,     49,   -65,     0,    0,     0,  //]./ 154;   % F
          65./98, 33./98, 13./882, 104./147,  5./18, -74360, 207025,226941,-51744,70560,     0,  //]./ 630630;% G
            0,      1.,   13./27,  -16./33, -10./297, -2535,      0,  1056, -3179, 7260,  1700,  //]./ 15730; % H
            0,      1.,     0,      16./33, -17./33,      0,      0,  -192,   968,  -85,  1615,  //]./ 2860;  % K
            0,      1.,     0,       0,        1.,        0,      0,     0,   -40, -285,   247,  //]./ 572;   % L
            0,      0,    11./21,   10./21,    0,      1156,   -245,  1287,     0,    0,     0,  //]./ 2688;  % P (30)
            0,      0,   143./378,-130./231, 35./594,   -39,      0,    24,    49,    0,     0,  //]./ 112;   % F
            0,      0,    11./18,    2./33, -65./198,  1375,   2450,  -858,  1617, 1620,     0,  //]./ 7920;  % G
            0,      0,    26./63,   18./77,  35./99, -42250,-207025,  3971,261954,  490,124950,  //]./ 640640;% H
            0,      0,      0,       8./11,  -3./11,      0,   1274,  2750,  1320, 2125, -1683,  //]./ 9152;  % I
            0,      0,      0,      17./33,  16./33,      0,      0,  -204,  -136,  605,    95,  //]./ 1040;  % K
            0,      0,      0,       0,        1.,        0,      0,     0,     0,  -15,   -49,  //]./ 64;    % M
            0,      0,      0,       0,        0,         0,      1,     0,     0,    0,     0,  //]./ 1;     % S (22)
            0,      0,      0,       0,        0,      -130,    195,   297,    18,    0,     0,  //]./ 640;   % D
            0,      0,      0,       0,        0,     18590,   4225,  -429,-23826,-4410,     0,  //]./ 51480; % G
            0,      0,      0,       0,        0,       980,  -2450,  1078,  -132,  245, -1275,  //]./ 6160;  % H
            0,      0,      0,       0,        0,         0,   1105,  9163, -2244,-4802,   990,  //]./ 18304; % I
            0,      0,      0,       0,        0,         0,      0,     0,   152, -147,   -65,  //]./ 364;   % L
            0,      0,      0,       0,        0,         0,      0,     0,     0,   -5,    11,};//]./ 16];   % N
      // ^------------ Racah IV, table IVa --------------^     ^--------- Racah IV, table IVb ----------^
#define SW(u,l,i) if(U.isequal(u)&&L==l) id=i
      SW(00,S,0); SW(10,F,1); SW(11,P,2); SW(11,H,3); SW(20,D,4); SW(20,G,5); SW(20,I,6);
#define SL(l,i) else if(L==l) id=i
      if(U.isequal(21)) { if(L==2) id=7; SL(3,8); SL(4,9); SL(5,10); SL(7,11); SL(8,12); }
      if(U.isequal(30)) { if(L==1) id=13; SL(3,14); SL(4,15); SL(5,16); SL(6,17); SL(7,18); SL(9,19); }
      if(U.isequal(22)) { if(L==0) id=20; SL(2,21); SL(4,22); SL(5,23); SL(6,24); SL(8,25); SL(10,26); }
      if(id<0) { if(Up.isequal(21)) { id = -1; } else { return ulf; } }

      if(Up.isequal(11)) { if(Lp==P) { ulf = t[id*11]; } else if(Lp==H) { ulf = t[id*11+1]; } }
      else if(Up.isequal(20))
      {
         if(Lp==D) { ulf = t[id*11+2]; }
         else if(Lp==G) { ulf = t[id*11+3]; }
         else if(Lp==I) { ulf = t[id*11+4]; }
      }
      else if(Up.isequal(21))
      {
         if(id!=-1)
	 {
            double den[] = {1,1,1344.,4928.,31360.,4312.,18304.,5390.,154.,630630.,15730.,2860.,572.,2688.,112.,
	                    7920.,640640.,9152.,1040.,64.,1,640.,51480.,6160.,18304.,364.,16.};
            if(Lp==D) { ulf = t[id*11+5]/den[id]; }
            else if(Lp==F) { ulf = t[id*11+6]/den[id]; }
            else if(Lp==G) { ulf = t[id*11+7]/den[id]; }
            else if(Lp==H) { ulf = t[id*11+8]/den[id]; }
            else if(Lp==K) { ulf = t[id*11+9]/den[id]; }
            else if(Lp==8) { 
	    ulf = t[id*11+10]/den[id]; }
	 }
  	 else if(U.isequal(31))
	 {
            // Table IIb from Wybourne, J. Chem. Phys. 36 (1961) 2295, modified by numbers from ACRY program of Allison
            // U'=(21) D        F        G        H        K        L                         U=(31)
            double t2[] = {52, 65,     -11,       0,       0,       0, //] ./ 128;         // P
                     156,     -26,     110,      60,       0,       0, //] ./ 352;         // D
                       8,      45,      13,       0,       0,       0, //] ./ 66;          // F
                      26,       0,     -16,      54,       0,       0, //] ./ 96;          // F'
                    9295,   -8450,    7722,     -33,    8820,       0, //] ./ 34320;       // G
                  258570,   71825,   22627,   54978,   74970,   66150, //] ./ 549120;      // H
                 -745290, 1002001, 5498339,  411906, -533610, -265302, //] ./ 8456448;     // H'
                       0,    6370,   -1078,  222024,  -67473,   23375, //] ./ 320320;      // I
                       0,   54145,   -9163,   -2244,    3528,   11000, //] ./ 80080        // I'
                       0,       0,   63308, -937992, -349125,  491415, //] ./ 1841840;     // K
                       0,       0,    2940,      90,     833,     323, //] ./ 4186;        // K'
                       0,       0,       0,     513,      98,     390, //] ./ 1001;        // L
                       0,       0,       0,       0,      49,     -15, //] ./ 64;          // M
                       0,       0,       0,       0,      11,       5, //] ./ 16;          // N
                       0,       0,       0,       0,       0,       1};//] ./ 1];          // O
            //------------------------- Original entries of Wybourne ----------------------//
            //        [0     2080     -352     1056     -153      935] ./ 4576;            // I
            //        [0     4420     -748    -8976     4050      110] ./ 18304;           // I'
            //        [0        0   341164   -55176     4845   159375] ./ 560560;          // K
            //        [0        0      816     2754     2420     -380] ./ 6370;            // K'
            //-----------------------------------------------------------------------------//
            // NB. The numbers for the original tables of Wybourne are consistent amongst themselves,
            //     but if their reciprocal is taken complete the entries in tables acry1 and acry2 below,
            //     those entries will not satisfy the orthonormality conditions. Hence we use instead the
            //     numbers from Allison's ACRY program, derived by P.B. Nutter.
#define CD(c,d) case c: id = d; break
            switch (L) { CD(P,0); CD(D,1); CD(F,2); CD(Fp,3); CD(G,4); CD(H,5); CD(Hp,6); CD(I,7); CD(Ip,8); 
	                 CD(K,9); CD(Kp,10); CD(8,11); CD(M,12); CD(N,13); CD(O,14); default: return ulf; }
	    double de2[] = {128.,352.,66.,96.,34320.,549120.,8456448.,320320.,80080.,1841840.,4186.,1001.,64.,16.,1};
	    if(id==-1) { return ulf; }
            if(Lp==D) { ulf = t2[id*6]/de2[id]; }
            else if(Lp==F) { ulf = t2[id*6+1]/de2[id]; }
            else if(Lp==G) { ulf = t2[id*6+2]/de2[id]; }
            else if(Lp==H) { ulf = t2[id*6+3]/de2[id]; }
            else if(Lp==K) { ulf = t2[id*6+4]/de2[id]; }
            else if(Lp==8) { ulf = t2[id*6+5]/de2[id]; }
	 }
      }
   }
   else if(Up.isequal(30))
   {
      //  .--------------------- Table IVc, from Racah IV --------------------.
      // U'                               (30)                                                          L  U
      // L'     P          F          G          H          I          K          M
      double t[] = {-54, -91,       189,      -156,         0,         0,         0,  //] ./ 490;     % D (20)
             -330,       910,       126,      -594,      2184,     -1785,         0,  //] ./ 5929;    % G
                0,      -245,     -1755,     -2310,     -2106,     -4320,    -11286,  //] ./ 22022;   % I
             -578,      1092,       700,       325,         0,         0,         0,  //] ./ 2695;    % D (21)
              -55,         0,      -560,      -715,      -364,         0,         0,  //] ./ 1694;    % F
           -83655,    -87360,    -56784,     -3971,    227500,    171360,         0,  //] ./ 630630;  % G
                0,     12740,     -7644,     18711,     -7800,     -8160,         0,  //] ./ 55055;   % H
                0,         0,    -16848,        77,    -27625,     79860,    -40755,  //] ./ 165165;  % K
                0,         0,         0,     -1785,     -1989,     -1140,     12103,  //] ./ 17017;   % L
                0,        13,         3,         0,         0,         0,         0,  //] ./ 16;      % P (30)
              429,       -77,       273,       -33,      -420,         0,         0,  //] ./ 1232;    % F
            -3465,     -9555,      7203,     27797,      1300,     -6120,         0,  //] ./ 55440;   % G
                0,      -195,     -4693,      1232,      2600,      2720,         0,  //] ./ 11440;   % H
                0,      5880,       520,     -6160,     -1911,     15680,     -1881,  //] ./ 32032;   % I
                0,         0,     33813,     89012,   -216580,      8085,    163020,  //] ./ 510510;  % K
                0,         0,         0,         0,       153,       960,      2695,  //] ./ 3808];   % M
      // Table IIc from Wybourne, J. Chem. Phys. 36 (1961) 2295, modified by numbers from ACRY program of Allison
      /* U'=(30) P         F          G          H          I          K          M         U=(31)
      t5 =*/    0,        -3,        13,         0,         0,         0,         0,  //] ./ 16;      % P (31)
             -936,     -1029,       -91,      1024,         0,         0,         0,  //] ./ 3080;    % D
              -99,         0,       700,     -1287,       455,         0,         0,  //] ./ 2541;    % F
             1287,      2079,       -91,       -99,       140,         0,         0,  //] ./ 3696;    % F'
           -83655,     66885,     31941,      5819,     -9100,     42840,         0,  //] ./ 240240;  % G
                0,     -3315,    -26741,    -20944,         0,    -17640,         0,  //] ./ 68640;   % H 
                0,    238875,     31213,     -1232,    632736,   -153000,         0,  //] ./ 1057056; % H'
                0,  -1901592,   2145000,     40656,  -1087515,     76032,    -34485,  //] ./ 5285280; % I
                0,     42364,     93925,    178024,    112710,       648,   -252890,  //] ./ 680680;  % I'
      //       [0          0    1098521                                            ] ./ 3920400; % K
       	        0,         0,   0.28021,  -0.62852, -0.082414, 0.0088109,-4.9822e-05,  //]./ 1;       % K
      //       [0          0    -595033                                            ] ./ 27442800;% K'
       	        0,         0, -0.021683,0.00050167,  -0.30417,  -0.48925,  -0.18439,  //] ./ 1;       % K'
                0,         0,         0,    -81396,     62985,    118336,      9555,  //] ./ 272272;  % L
                0,         0,         0,         0,      -255,       256,       -33,  //] ./ 544;     % M
                0,         0,         0,         0,         0,       -11,        23,  //] ./ 34;      % N
                0,         0,         0,         0,         0,         0,        -1,  //] ./ 1];      % O
      //------------------------ Original entries of Wybourne -----------------------%
      //       [0     -51450     402038     137984      -1365       9072    -182875] ./ 784784;  % I
      //       [0    9516192    -841568    2492336    9862125    -100800   -3869635] ./ 26682656;% I'
      //      -[0          0 -118697579  616876876 1092831740  730219875  349489140] ./2908115210;%K
      //      -[0         0 2560049856 -4088054124  105884415 2421693120  630194565] ./9805876080;%K'
      //-----------------------------------------------------------------------------%
      // NB. The numbers for the original tables of Wybourne are consistent amongst themselves, but if their
      //     reciprocal is taken complete the entries in tables acry1 and acry2 below, those entries will not 
      //     satisfy the orthonormality conditions. Hence we use instead the numbers from Allison's ACRY 
      //     program (Comp. Phys. Comm. v8 (1974) 246-256), derived by P.B. Nutter, as was the following:
      // U'                                        (30)                                                 L   U
      /* L'     P          F          G          H          I          K          M
      acry3 =*/ 0,        -1,         0,         0,         0,         0,         0,  //] ./ 1        % S  (40)
              104,       -21,        91,        64,         0,         0,         0,  //] ./ 280      % D
             -143,       231,        91,        11,      -140,         0,         0,  //] ./ 616      % F
        0.2149471,-0.0113636, 0.5547979,-0.0330586,     5./66, 0.1100751,         0,  //;             % G
        0.1860269, 0.2458678,-0.0710285, 0.3348485, 0.1338056, 0.0284228,         0,  //;             % G'
                0, 0.4772727,-0.0318182,-0.2461538,-0.0324675, 0.2122877,         0,  //;             % H
                0,-0.1607264, 0.0278592,-0.3300248, 0.4701247, 0.0042860,-0.0069789,  //;             % I
                0, 0.2223791, 0.3323828,-0.1035416,-0.0032372,-0.2946984, 0.0437608,  //;             % I'
                0,         0, 0.5298702, 0.1961538, 0.0219156, 0.0025856,-0.2494748,  //;             % K
                0,         0,         0, 0.5961539, 0.0388825, 0.1283650, 0.2365987,  //;             % L
                0,         0,         0,         0, 0.6129032,-0.3700190, 0.0170778,  //;             % L'
                0,         0,         0,         0, 0.4910714, 0.2773109,-0.2316176,  //;             % M
                0,         0,         0,         0,         0, 0.6764705, 0.3235294,  //;             % N
                0,         0,         0,         0,         0,         0,         1}; //];            % Q
      // Reminder: #define SW(u,l,i) if(U.isequal(u)&&L==l) id=i
      //           #define CD(c,d) case c: id = d; break
      SW(20,D,0); SW(20,G,1); SW(20,I,2);
      if(U.isequal(21)) { switch (L) { CD(D,3);  CD(F,4);  CD(G,5);  CD(H,6);   CD(K,7);  CD(8,8); default: return ulf; } }
      if(U.isequal(30)) { switch (L) { CD(P,9);  CD(F,10); CD(G,11); CD(H,12);  CD(I,13); CD(K,14); CD(M,15); default: return ulf; } }
      if(U.isequal(31)) { switch (L) { CD(P,16); CD(D,17); CD(F,18); CD(Fp,19); CD(G,20); CD(H,21); CD(Hp,22); CD(I,23); 
                                         CD(Ip,24); CD(K,25); CD(Kp,26); CD(8,27); CD(M,28); CD(N,29); CD(O,30); default: return ulf; } }
      if(U.isequal(40)) { switch (L) { CD(S,31); CD(D,32); CD(F,33); CD(G,34); CD(Gp,35); CD(H,36); CD(I,37); CD(Ip,38); 
                                         CD(K,39); CD(8,40); CD(-8,41); CD(M,42); CD(N,43); CD(Q,44); default: return ulf; } }
      double den[] = {490.,5929.,22022.,2695.,1694.,630630.,55055.,165165.,17017.,16.,1232.,55440.,11440.,32032.,
                      510510.,3808.,16.,3080.,2541.,3696.,240240.,68640.,1057056.,5285280.,680680.,1,1,272272.,
                      544.,34.,1.,1.,280.,616.,1,1,1,1,1,1,1,1,1,1,1};
      if(id<0) { return ulf; }
      if(Lp==P) { ulf = t[id*7]/den[id]; }
      else if(Lp==F) { ulf = t[id*7+1]/den[id]; }
      else if(Lp==G) { ulf = t[id*7+2]/den[id]; }
      else if(Lp==H) { ulf = t[id*7+3]/den[id]; }
      else if(Lp==I) { ulf = t[id*7+4]/den[id]; }
      else if(Lp==K) { ulf = t[id*7+5]/den[id]; }
      else if(Lp==M) { ulf = t[id*7+6]/den[id]; }
   }  // if(Up.isequal(30)
   else if(Up.isequal(22))
   {
      // T6 is not complete! It has been partially reassembled from the tabulated cfp listed in 
      //   C.W. Neilson and G.F. Koster, 1963.
      // U'=(22) S         D            G           H           I             L            N               U=(31)
      double t[] = {0,    27,          -8,          0,          0,            0,           0, //] ./ 35;     % P
                 0,     -720,        -841,       -364,          0,            0,           0, //] ./ 1925;   % D
              4455,    -3432,       -1664,       1386,      -1768,            0,           0, //] ./ 12705;  % F
                 0,       33,       -1444,          0,        833,            0,           0, //] ./ 2310;   % F'
                 0,     1485,        -972,      -4928,      -4165,            0,           0, //] ./ 11550;  % G
                 0,     6630,       62866,     -34034,     -28665,        17955,           0, //] ./ 150150; % H
                 0,   133770,         686,      82654,     -69615,       -43605,           0, //] ./ 330330; % H'
                 0,        0,        5600,       -572,      -4641,       -14212,           0, //] ./ 25025;  % I
                 0,        0,       -2975,     -19448,      -2184,          418,           0, //] ./ 25025   % I'
              // 0,        0,  8075/36179,  -323/1771,[14592/2805, 2583552/8645, -144669/323]     ./ 1265];  % K
                 0,        0,928625./3289,-37145./161,14592./2805,2583552./8645,-144669./323, //] ./ 1265;   % K
                 0,        0,      -17472,     -50193,     244944,       -38896,       -2695, //] ./ 354200; % K'
                 0,        0,           0, -171./3080,   114./935,  -5046./7315,  -343./2584, //] ./ 1;      % L
                 0,        0,           0,          0,    -21./85,      -12./95,  1012./1615, //] ./ 1;      % M
                 0,        0,           0,          0,          0,           49,          46, //] ./ 95;     % N
                 0,        0,           0,          0,          0,           -1,          18, //] ./ 19];    % O
      /* U'=(22) S         D            G           H           I             L            N               U=(21)
      t7 = [[*/  0,  -13./77,    208./385,    -16./55,          0,            0,           0, //] ./ 1;      % D
             -1408,    -2145,       -1040,      -6160,      -1105,            0,           0, //] ./ 11858;  % F
                 0,     1485,         -48,      -1232,       4165,            0,           0, //] ./ 6930;   % G
                 0,    -4095,      121296,      -6864,      46410,      -206720,           0, //] ./ 385385; % H
                 0,        0,        1008,        572,       4459,         8976,        8580, //] ./ 23595;  % K
                 0,        0,           0,       1020,        315,        -1360,        6468};//] ./ 9163];  % L
      if(U.isequal(31)) { switch (L) { CD(P,0); CD(D,1); CD(F,2); CD(Fp,3); CD(G,4); CD(H,5); CD(Hp,6); CD(I,7); 
                                         CD(Ip,8); CD(K,9); CD(Kp,10); CD(8,11); CD(M,12); CD(N,13); CD(O,14); default: return ulf; } }
      if(U.isequal(21)) { switch (L) { CD(D,15); CD(F,16); CD(G,17); CD(H,18); CD(K,19); CD(8,20); default: return ulf; } }
      double den[] = {35.,1925.,12705.,2310.,11550.,150150.,330330.,25025.,25025.,1265.,354200.,1,1,95.,19.,1,
                      11858.,6930.,385385.,23595.,9163.};
      if(id<0) { return ulf; }
      if(Lp==S) { ulf = t[id*7]/den[id]; }
      else if(Lp==D) { ulf = t[id*7+1]/den[id]; }
      else if(Lp==G) { ulf = t[id*7+2]/den[id]; }
      else if(Lp==H) { ulf = t[id*7+3]/den[id]; }
      else if(Lp==I) { ulf = t[id*7+4]/den[id]; }
      else if(Lp==8) { ulf = t[id*7+5]/den[id]; }
      else if(Lp==N) { ulf = t[id*7+6]/den[id]; }
   }
   else if(Up.isequal(31))
   {  /*
      % Tables from ACRY program of Allison et al. (Comp. Phys. Comm. vol 8, p 246-256, 1974)
      % Expressed in rational form by guesswork and using the reciprocity relations (Judd 1963, p180, eq 7-37)
      % (31)L' P           D           F           F'          G          H            H'          I                L   U
      acry1 = [0           0           0           0           0          0            0           0              % S  (00)
               0           0           0           0           0          0            0           0              % F  (10)
               0           0           0           0           0          0            0           0              % P  (11)
               0           0           0           0           0          0            0           0              % H
               0           0           0           0           0          0            0           0              % D  (20)
               0           0           0           0           0          0            0           0              % G
               0           0           0           0           0          0            0           0              % I
      % (31)L'  K           K'          L           M           N           O             L  U
      acry2 = [ 0           0           0           0           0           0;          % S  (00)
                0           0           0           0           0           0;          % F  (10)
                0           0           0           0           0           0;          % P  (11)
                0           0           0           0           0           0;          % H
                0           0           0           0           0           0;          % D  (20)
                0           0           0           0           0           0;          % G
                0           0           0           0           0           0;          % I */
      if(U.isequal(21))
      {
         //id = (L==D?0:-1)+(L==F?1:-1)+(L==G?2:-1)+(L==H?3:-1)+(L==K?4:-1)+(L==L?5:-1); if(id<0) { return ulf; }
	 switch (L) { CD(D,0); CD(F,1); CD(G,2); CD(H,3); CD(K,4); CD(8,5); default: return ulf; } 
         if(abs(Lp)<6 || Lp==I)
	 {   // P          D           F           F'          G           H           H'          I                L   U
         double t[]={-26./315,104./693,-256./4455,-52./405,   52./315,  -221./630,    13./198,     0,            // D  (21)
             65./882,   260./14553,  160./693,     0,        520./4851, 1105./15876, 143./2268,  -26./2079,      // F
             11./1134,  100./1701,  -416./8019,   32./729,     8./105,-22627./1326780,-10201./37908,-182./110565,// G
                0,     -200./7623,     0,          4./33,      4./15015, 119./3510, 6241./378378,-6728./24255,   // H
                0,         0,          0,          0,       -112./2145,  119./3510,  -11./702,    17./275,       // K
                0,         0,          0,          0,          0,        -35./1326,  289./42042,  25./1323};     // L
            if(Lp==P) { ulf = t[id*8]; } else if(Lp==D)  { ulf = t[id*8+1]; }
	    else if(Lp==F)  { ulf = t[id*8+2]; } else if(Lp==Fp) { ulf = t[id*8+3]; } else if(Lp==G)  { ulf = t[id*8+4]; }
	    else if(Lp==H)  { ulf = t[id*8+5]; } else if(Lp==Hp) { ulf = t[id*8+6]; } else if(Lp==I)  { ulf = t[id*8+7]; }
         }
	 else if(Lp==Ip || abs(Lp)>6)
         {  // I'          K           K'          L           M           N           O  (31)'        L   U
            double t[]={0, 0,          0,          0,          0,          0,          0,           // D  (21)
              -884./2079,  0,          0,          0,          0,          0,          0,           // F
            -6188./110565,-5168./266409,-3200./8073,0,         0,          0,          0,           // G
             272./24255,  -10336./43953,1600./161161,-20672./77077, 0,     0,          0,           // H
              -32./2475,  -1900./29601,544./8073,-2176./57915, 133./405,   -44./135,   0,           // K
            800./22491,-655220./8219211,-3040./131859,640./4851,95./1071,  20./153,   -1472./3213}; // L
	    if(Lp==Ip) { ulf = t[id*7]; }
	    else if(Lp==K) { ulf = t[id*7+1]; } else if(Lp==Kp) { ulf = t[id*7+2]; } else if(Lp==8) { ulf = t[id*7+3]; }
	    else if(Lp==M) { ulf = t[id*7+4]; } else if(Lp==N)  { ulf = t[id*7+5]; } else if(Lp==O) { ulf = t[id*7+6]; }
         }
         /*%------------------------------- Reciprocal of original Wybourne values ------------------------------%
           % 65/882    260/14553 160/693   0         520/4851    1105/15876  143/2268   -4160/14553 -2210/14553; % F  (21)
           % 11/1134   100/1701 -416/8019  32/729    8/105  -22627/1326780 -10201/37908 -64/1701    -34/1701;    % G
           % 0        -200/7623  0         4/33      4/15015     119/3510   6241/378378 -64/693      136/693;    % H
           % 0         0         0         0        -112/2145    119/3510   -11/702      34/3465    -5/77;       % K
           % 0         0         0         0         0          -35/1326     289/42042   10/189      5/3213;     % L
           %-143/1296 -13/1944  -700/8019  91/11664  13/240     22627/116640 -343/23328  28717/95256 -221/11907; % G  (30)
           %-----------------------------------------------------------------------------------------------------%
           %  -1364656/3972969 -26112/361179 0           0           0           0;          % G  (21)
           %        -608/13377   9792/49049 -20672/77077 0           0           0;          % H
           %     -12920/441441 15488/120393 -2176/57915  133/405    -44/135      0;          % K
           %    -125000/147147 -12160/682227 640/4851    95/1071     20/153     -1472/3213;  % L
           %-------------------- Reciprocal of original Wybourne values ---------------------%  */
      }
      else if(U.isequal(22))
      {
	 switch (L) { CD(S,0); CD(D,1); CD(G,2); CD(H,3); CD(I,4); CD(8,5); CD(N,6); default: return ulf; }
         if(abs(Lp)<6 || Lp==I)
	 {   // P          D           F           F'          G           H           H'          I                L   U
            double t[]={0, 0,         -1,          0,          0,          0,          0,          0,            // S  (22)
            -33./175,   -16./105,   104./675,   -11./1350,   33./350,  -187./4725,  -49./135,      0,            // D
             88./2835, -841./8505, 1664./40095, 722./3645,   -6./175,-345763./1658475,-49./47385,32./243,        // G
               0,        52./1485,   14./495,      0,        32./225,  -187./2025,  289./2835,   52./4725,       // H
               0,          0,       136./4455, -833./10530,-119./1170,   77./1170,   17./234,   -17./225,        // I
               0,          0,          0,          0,          0,      -209./6630,   19./546,  -836./4725,       // L
               0,          0,          0,          0,          0,          0,          0,          0};           // N
            if(Lp==P) { ulf = t[id*8]; } else if(Lp==D)  { ulf = t[id*8+1]; }
	    else if(Lp==F)  { ulf = t[id*8+2]; } else if(Lp==Fp) { ulf = t[id*8+3]; } else if(Lp==G)  { ulf = t[id*8+4]; }
	    else if(Lp==H)  { ulf = t[id*8+5]; } else if(Lp==Hp) { ulf = t[id*8+6]; } else if(Lp==I)  { ulf = t[id*8+7]; }
         }
	 else if(Lp==Ip || abs(Lp)>6)
         {  // I'          K           K'          L           M           N           O  (31)'        L   U
            double t[]={0, 0,          0,          0,          0,          0,          0,           // S  (22)
               0,          0,          0,          0,          0,          0,          0,           // D
             -17./243,-40375./266409,104./3105,    0,          0,          0,          0,           // G
            1768./4725,-1615./15939,-507./6440,  323./9240,    0,          0,          0,           // H
              -8./255, -4864./2516085,-486./1495, 38./585,  1463./9945,    0,          0,           // I
             418./80325,-861184./10140585,286./7245,-1682./5985,44./765,3773./14535, 253./8721,     // L
               0,       6889./66861,  11./4968, -539./12312,-11132./48195,506./2565,-506./1197};    // N
	    if(Lp==Ip) { ulf = t[id*7]; }
	    else if(Lp==K) { ulf = t[id*7+1]; } else if(Lp==Kp) { ulf = t[id*7+2]; } else if(Lp==8) { ulf = t[id*7+3]; }
	    else if(Lp==M) { ulf = t[id*7+4]; } else if(Lp==N)  { ulf = t[id*7+5]; } else if(Lp==O) { ulf = t[id*7+6]; }
	 }
      }
      else if(U.isequal(30))
      {
	 switch (L) { CD(P,0); CD(F,1); CD(G,2); CD(H,3); CD(I,4); CD(K,5); CD(M,6); default: return ulf; }
         if(abs(Lp)<6 || Lp==I)
	 {   // P          D           F           F'          G           H           H'          I                L   U
            double t[]={0,13./63,     -1./27,    143./432,   143./336,     0,          0,          0,            // P  (30)
              -11./336,    7./72,      0,         11./48,     -7./48,   -187./6048,  125./864,    49./180,       // F
          -143./1296, -13./1944, -700./8019, 91./11664, 13./240,1493382./7698240,-113190./7698240, 1625./6804,   // G
               0,       -128./2079,  -13./99,     -1./144,  -529./65520,-1309./10530, -1./2106,   -1./270,       // H
               0,          0,        -35./891,   -35./4212,   -5./468,     0,        -13./63,   -169./2016,      // I
               0,          0,          0,          0,        -17./390,  -539./7020, -425./9828,   -8./1575,      // K
               0,          0,          0,          0,          0,          0,          0,         11./6048};     // M
            if(Lp==P) { ulf = t[id*8]; } else if(Lp==D)  { ulf = t[id*8+1]; }
	    else if(Lp==F)  { ulf = t[id*8+2]; } else if(Lp==Fp) { ulf = t[id*8+3]; } else if(Lp==G)  { ulf = t[id*8+4]; }
	    else if(Lp==H)  { ulf = t[id*8+5]; } else if(Lp==Hp) { ulf = t[id*8+6]; } else if(Lp==I)  { ulf = t[id*8+7]; }
         }
	 else if(Lp==Ip || abs(Lp)>6)
         {  // I'          K           K'          L           M           N           O  (31)'        L   U
            double t[]={0, 0,          0,          0,          0,          0,          0,           // P  (30)
             -17./360,     0,          0,          0,          0,          0,          0,           // F
            1105./13608,  -0.1902636,  0.0147228,  0,          0,          0,          0,           // G
             -17./135,    -0.3491774,  0.0002787, 323./1716,   0,          0,          0,           // H
              17./252,     0.0387415,  0.1429865, 1615./13104, 1045./3744, 0,          0,           // I
             -0.0003361,   0.0035896, -0.1993240,-7396./36855, 1672./6885, 847./4590,  0,           // K
              0.1035617,  -0.0000160, -0.0593081,-35./2736,   -121./4896, -1771./5814,-253./513};   // M
	    if(Lp==Ip) { ulf = t[id*7]; }
	    else if(Lp==K) { ulf = t[id*7+1]; } else if(Lp==Kp) { ulf = t[id*7+2]; } else if(Lp==8) { ulf = t[id*7+3]; }
	    else if(Lp==M) { ulf = t[id*7+4]; } else if(Lp==N)  { ulf = t[id*7+5]; } else if(Lp==O) { ulf = t[id*7+6]; }
         }
      }
      else if(U.isequal(31))
      {
         switch (L) { CD(P,0); CD(D,1); CD(F,2); CD(Fp,3); CD(G,4); CD(H,5); CD(Hp,6); CD(I,7); 
                      CD(Ip,8); CD(K,9); CD(Kp,10); CD(8,11); CD(M,12); CD(N,13); CD(O,14); default: return ulf; break; }
         if(abs(Lp)<6 || Lp==I)
	 {  // P           D           F           F'          G           H           H'          I                L   U
            double t[]={0,361./1365,   5./9,    3773./65520,-891./7280,    0,          0,          0,            // P  (31)
            -361./2275,  -36./5005,    8./9900, 7921./23400,  13./56,     68./819,  1156./6435,    0,            // D
               5./21,     -2./3465,  -52./165,     0,         -4./1155,   85./378,    11./54,      1./2475,      // F
              77./3120,-7921./32760,   0,         55./624,  2809./21840,1309./56160,-6125./56160,4489./11700,    // F'
             297./7280,   65./504,     4./1485,-2809./28080,-121./1456,  0.1143465654,-.1143997899,13./900,      // G
               0,       -340./9009,   85./594,   833./56160,  -0.0935565,  0.2067157, -0.1566655,  0.0232471,    // H
               0,      -1156./14157,   7./54,  -8575./123552,  0.0935993, -0.1566655, -0.0947963, -0.0080142,    // H'
               0,          0,         -7./32175,-31423./152100,1./100,    -0.0196701,  0.0067812, -0.1199999,    // I
               0,          0,       -238./32175, 119./304200,-6137./33800,-0.0765131, -0.0078238,  0.0631416,    // I'
               0,          0,          0,          0,          0.0122390, -0.0621804,  0.0007254,  0.2218316,    // K
               0,          0,          0,          0,         -0.0711289,  0.0012829,  0.2536230, -0.0131951,    // K'
               0,          0,          0,          0,          0,         -0.0952340,  0.0065704,  0.0882149,    // L
               0,          0,          0,          0,          0,          0,          0,          0.1279779,    // M
               0,          0,          0,          0,          0,          0,          0,          0,            // N
               0,          0,          0,          0,          0,          0,          0,          0};           // O
            if(Lp==P) { ulf = t[id*8]; } else if(Lp==D)  { ulf = t[id*8+1]; }
	    else if(Lp==F)  { ulf = t[id*8+2]; } else if(Lp==Fp) { ulf = t[id*8+3]; } else if(Lp==G)  { ulf = t[id*8+4]; }
	    else if(Lp==H)  { ulf = t[id*8+5]; } else if(Lp==Hp) { ulf = t[id*8+6]; } else if(Lp==I)  { ulf = t[id*8+7]; }
         }
	 else if(Lp==Ip || abs(Lp)>6)
         {  // I'          K           K'          L           M           N           O  (31)'        L   U
            double t[]={0, 0,          0,          0,          0,          0,          0,           // P  (31)
               0,          0,          0,          0,          0,          0,          0,           // D
              34./2475,    0,          0,          0,          0,          0,          0,           // F
             -17./23400,   0,          0,          0,          0,          0,          0,           // F'
           -6137./23400,  -0.0203967,  0.1185490,  0,          0,          0,          0,           // G
               0.0904265, -0.0847935,  0.0017494,  0.1471759,  0,          0,          0,           // H
               0.0092464,  0.0009893,  0.3458498, -0.0101542,  0,          0,          0,           // H'
               0.0631416, -0.2559594,  0.0152247,  0.1153571, -0.1870488,  0,          0,           // I
               0.4938857, -0.0002762, -0.1525282, -0.0157396, -0.0007275,  0,          0,           // I'
               0.0002394, -0.0089932,  0.0789138, -0.4459995, -0.1652895,  0.0035878,  0,           // K
               0.1321904,  0.0789138,  0.2912542, -0.0033336,  0.0700938,  0.0849833,  0,           // K'
              -0.0120363,  0.3935290,  0.0029414,  0.0421070,  0.0416478,  0.2300826,  0.0876399,   // L
               0.0004977, -0.1304917,  0.0553372, -0.0372638, -0.1642860,  0.3378153, -0.1463274,   // M
               0,         -0.0025627, -0.0607023,  0.1862573, -0.3056425,  0.1787854,  0.2660497,   // N
               0,          0,          0,         -0.0647773, -0.1208791, -0.2429150,  4./7};       // O
	    if(Lp==Ip) { ulf = t[id*7]; }
	    else if(Lp==K) { ulf = t[id*7+1]; } else if(Lp==Kp) { ulf = t[id*7+2]; } else if(Lp==8) { ulf = t[id*7+3]; }
	    else if(Lp==M) { ulf = t[id*7+4]; } else if(Lp==N)  { ulf = t[id*7+5]; } else if(Lp==O) { ulf = t[id*7+6]; }
         }
      }
      else if(U.isequal(40))
      {
         switch (L) { CD(S,0); CD(D,1); CD(F,2); CD(G,3); CD(Gp,4); CD(H,5); CD(I,6); CD(Ip,7); CD(K,8); 
	              CD(8,9); CD(-8,10); CD(M,11); CD(N,12); CD(Q,13); default: return ulf; break; }
         if(abs(Lp)<7)
	 {  // acry4a = [
            // P          D          F          F'         G          H          H'         I          I'           L   U
            double t[] ={0, 0,       0,        -1,         0,         0,         0,         0,         0,        // % S (40)
              -0.0010582,-0.2328042,-0.2353909, 0.1729424,-0.0699735,-0.2878307, 0,         0,         0,        // % D
              -0.0800264,-0.1212522, 0,        -0.2268518, 0.0823112,-0.0755805, 0.3536523, 0.0593715, 0.0009540,// % F
              -0.1940280, 0.0001796, 0.0634050,-0.0592776,-0.2574969,-0.0227818,-0.0477904, 0.1646132, 0.0186910,// % G
               0.0641289,-0.1904435,-0.0857408,-0.1133592,-0.1713992, 0.0044139,-0.0001744,-0.0888366, 0.0197596,// % G'
               0,         0.0987654, 0,         0.1473064,-0.1218467,-0.1377651,-0.0159182,-0.2586019, 0.0348886,// % H
               0,         0,        -0.2471791,-0.0046653,-0.0138899, 0,         0.1920779, 0.1374647,-0.0035082,// % I
               0,         0,        -0.0775497,-0.0041012, 0.1693204, 0.1619183,-0.0314331,-0.0853047, 0.0524322,// % I'
               0,         0,         0,         0,        -0.0105672,-0.1838557, 0.0126848,-0.1914394,-0.2457522,// % K
               0,         0,         0,         0,         0,         0.0691978, 0.0003610, 0.0006166, 0.2683544,// % L
               0,         0,         0,         0,         0,        -0.0485331,-0.2593052,-0.0681004, 0.0721063,// % L'
               0,         0,         0,         0,         0,         0,         0,         0.0021825,-0.0831933,// % M
               0,         0,         0,         0,         0,         0,         0,         0,         0,        // % N
               0,         0,         0,         0,         0,         0,         0,         0,         0};       // % Q
	         if(Lp==P)  { ulf = t[id*9];   } else if(Lp==D)  { ulf = t[id*9+1]; } else if(Lp==F)  { ulf = t[id*9+2]; }
	    else if(Lp==Fp) { ulf = t[id*9+3]; } else if(Lp==G)  { ulf = t[id*9+4]; } else if(Lp==H)  { ulf = t[id*9+5]; }
	    else if(Lp==Hp) { ulf = t[id*9+6]; } else if(Lp==I)  { ulf = t[id*9+7]; } else if(Lp==Ip) { ulf = t[id*9+8]; }
         }
	 else
	 {  // acry4b = [
            // K          K'         L          M          N          O  (31)'       L   U
            double t[] = {0, 0,      0,         0,         0,         0,         //% S  (40)
               0,         0,         0,         0,         0,         0,         //% D
               0,         0,         0,         0,         0,         0,         //% F
               0.0370462,-0.1346902, 0,         0,         0,         0,         //% G
              -0.1970326,-0.0647111, 0,         0,         0,         0,         //% G'
               0.0714463, 0.0148656, 0.0985959, 0,         0,         0,         //% H
               0.1101082, 0.0098998, 0.2599370,-0.0212699, 0,         0,         //% I
               0.1792547,-0.1479586,-0.0059868,-0.0847403, 0,         0,         //% I'
               0.1705613, 0.0148673,-0.0263148,-0.0069565,-0.1370007, 0,         //% K
               0.2912561,-0.0101679,-0.2281106, 0.0022533,-0.0003690,-0.1293134, //% L
               0.0053092, 0.0639327, 0.0276677,-0.3626899, 0.0830217,-0.0093339, //% L'
              -0.0093072,-0.3039740,-0.2063840,-0.2562364,-0.0164472, 0.1222754, //% M
              -0.0006307, 0.1512346, 0.1506931,-0.2620569,-0.4075374,-0.0278474, //% N
               0,         0,         0,         0.0095238, 0.3151515, 0.6753247};//% Q
	         if(Lp==K) { ulf = t[id*6];   } else if(Lp==Kp) { ulf = t[id*6+1]; } else if(Lp==8) { ulf = t[id*6+2]; }
	    else if(Lp==M) { ulf = t[id*6+3]; } else if(Lp==N)  { ulf = t[id*6+4]; } else if(Lp==O) { ulf = t[id*6+5]; }
         }
      }
   } // if(Up.isequal(31))
   else if(Up.isequal(40))
   {
      if(U.isequal(30))
      {
	 switch (L) { CD(P,0); CD(F,1); CD(G,2); CD(H,3); CD(I,4); CD(K,5); CD(M,6); default: return ulf; }
         if(abs(Lp)<8)
	 {  // S         D          F          G          G'         H          I          I'         K   (40')    L   U
            double t[]={0,-0.2619047,-0.2291667,-0.2728175,-0.2361111,0,        0,         0,         0,        // P  (30)
              0.0604396, 0.0226648, 0.1586539, 0.0061813,-0.1337413, 0.3173077, 0.1262850,-0.1747265, 0,        // F
              0,         0.0763889,-0.0486111, 0.2347222,-0.0300505, 0.0164530, 0.0170251, 0.2031228,-0.3736264,// G
              0,        -0.0439560, 0.0048077, 0.0114434,-0.1159091,-0.1041420, 0.1650124, 0.0517708, 0.1131657,// H
              0,         0,         0.0517752, 0.0221894, 0.0391916, 0.0116230, 0.1988989,-0.0013696,-0.0106984,// I
              0,         0,         0,        -0.0279421,-0.0072150, 0.0658636,-0.0015715, 0.1080561, 0.0010939,// K
              0,         0,         0,         0,         0,         0,         0.0020202,-0.0126676,-0.0833266};//M
            if(Lp==S)       { ulf = t[id*9]; }   else if(Lp==D)  { ulf = t[id*9+1]; } else if(Lp==F)  { ulf = t[id*9+2]; }
	    else if(Lp==G)  { ulf = t[id*9+3]; } else if(Lp==Gp) { ulf = t[id*9+4]; } else if(Lp==H)  { ulf = t[id*9+5]; }
	    else if(Lp==I)  { ulf = t[id*9+6]; } else if(Lp==Ip) { ulf = t[id*9+7]; } else if(Lp==K)  { ulf = t[id*9+8]; }
         }
         else
         {  // L         L'         M          N          Q   (40')    L   U
            double t[]={0,0,        0,         0,         0,        // P  (30)
              0,         0,         0,         0,         0,        // F
              0,         0,         0,         0,         0,        // G
             -0.3897929, 0,         0,         0,         0,        // H
              0.0215119, 0.3390914,-0.3036506, 0,         0,        // I
             -0.0615494, 0.1774194, 0.1486102,-0.4006788, 0,        // K
             -0.0895627,-0.0064647,-0.0979921,-0.1512860,-0.5566801};//M
            if(Lp==8)       { ulf = t[id*5]; }   else if(Lp==-8) { ulf = t[id*5+1]; } else if(Lp==M)  { ulf = t[id*5+2]; }
            else if(Lp==N)  { ulf = t[id*5+3]; } else if(Lp==Q)  { ulf = t[id*5+4]; }
         }
      }
         /*   0,         0,         0,         0,         0,         0,         0,         0,         0,        // S  (22)
              0,         0,         0,         0,         0,         0,         0,         0,         0,        // D
              0,         0,         0,         0,         0,         0,         0,         0,         0,        // G
              0,         0,         0,         0,         0,         0,         0,         0,         0,        // H
              0,         0,         0,         0,         0,         0,         0,         0,         0,        // I
              0,         0,         0,         0,         0,         0,         0,         0,         0,        // L
              0,         0,         0,         0,         0,         0,         0,         0,         0,        // N */
      else if(U.isequal(31))
      {
         switch (L) { CD(P,0); CD(D,1); CD(F,2); CD(Fp,3); CD(G,4); CD(H,5); CD(Hp,6); CD(I,7); 
                      CD(Ip,8); CD(K,9); CD(Kp,10); CD(8,11); CD(M,12); CD(N,13); CD(O,14); default: return ulf; break; }
         if(abs(Lp)<8)
	 {  // S         D          F          G          G'         H          I          I'         K   (40')    L   U
            double t[]={0,0.0018315,-0.1939102, 0.6044719,-0.1997863,0,         0,         0,         0,        // P  (31)
              0,        -0.2417582, 0.1762820, 0.0003358,-0.3559829,-0.2256410, 0,         0,         0,        // D
              0,         0.1746032, 0,        -0.0846561, 0.1144781, 0,         0.4767025, 0.1495601, 0,        // F
              0.1483516,-0.1282814,-0.2355769, 0.0791454, 0.1513533, 0.2403846, 0.0089973, 0.0079094, 0,        // F'
              0,        -0.0403694,-0.0664821,-0.2674007,-0.1779914, 0.1546516,-0.0208349, 0.2539805, 0.0182894,// G
              0,         0.1358641,-0.0499466, 0.0193566,-0.0037503,-0.1430638, 0,        -0.1987180,-0.2603550,// H
              0,         0,         0.2337073, 0.0406051, 0.0001482,-0.0165305,-0.2357320, 0.0385770, 0.0179628,// H'
              0,         0,        -0.0331988, 0.1183462,-0.0638678, 0.2272330, 0.1427518,-0.0885856, 0.2293874,// I
              0,         0,        -0.0005334, 0.0134376, 0.0142059,-0.0306565,-0.0036431, 0.0544488, 0.2944664,// I'
              0,         0,         0,        -0.0230826, 0.1227665, 0.0544091,-0.0990973,-0.1613293, 0.1771213,// K
              0,         0,         0,         0.0839223, 0.0403200, 0.0113207,-0.0089098, 0.1331628, 0.0154391,// K'
              0,         0,         0,         0,         0,        -0.0662511, 0.2064206,-0.0047543, 0.0241120,// L
              0,         0,         0,         0,         0,         0,         0.0151128, 0.0602102,-0.0057032,// M
              0,         0,         0,         0,         0,         0,         0,         0,         0.1016214,// N
              0,         0,         0,         0,         0,         0,         0,         0,         0};       // O
            if(Lp==S)       { ulf = t[id*9]; }   else if(Lp==D)  { ulf = t[id*9+1]; } else if(Lp==F)  { ulf = t[id*9+2]; }
	    else if(Lp==G)  { ulf = t[id*9+3]; } else if(Lp==Gp) { ulf = t[id*9+4]; } else if(Lp==H)  { ulf = t[id*9+5]; }
	    else if(Lp==I)  { ulf = t[id*9+6]; } else if(Lp==Ip) { ulf = t[id*9+7]; } else if(Lp==K)  { ulf = t[id*9+8]; }
         }
         else
         {  // L         L'         M          N          Q   (40')      L   U
            double t[]={0,0,        0,         0,         0,          // P  (31)
              0,         0,         0,         0,         0,          // D
              0,         0,         0,         0,         0,          // F
              0,         0,         0,         0,         0,          // F'
              0,         0,         0,         0,         0,          // G
             -0.1110552, 0.0778905, 0,         0,         0,          // H
             -0.0005794, 0.4161577, 0,         0,         0,          // H'
              0.0008373,-0.0924795,-0.0033126, 0,         0,          // I
              0.3644221, 0.0979194, 0.1262667, 0,         0,          // I'
             -0.3427860,-0.0062485,-0.0122425, 0.0009169, 0,          // K
              0.0119668,-0.0752439,-0.3998427,-0.2198718, 0,          // K'
             -0.2368841, 0.0287319, 0.2395362, 0.1933099, 0,          // L
             -0.0020937, 0.3369932,-0.2660916, 0.3007820,-0.0130133,  // M
             -0.0003102, 0.0697930, 0.0154532,-0.4232119, 0.3896104,  // N
              0.0992556, 0.0071643, 0.1048951, 0.0264038,-0.7622812}; // O
            if(Lp==8)       { ulf = t[id*5]; }   else if(Lp==-8) { ulf = t[id*5+1]; } else if(Lp==M)  { ulf = t[id*5+2]; }
            else if(Lp==N)  { ulf = t[id*5+3]; } else if(Lp==Q)  { ulf = t[id*5+4]; }
         }
      }
      else if(U.isequal(40))
      {
         switch (L) { CD(S,0); CD(D,1); CD(F,2); CD(G,3); CD(Gp,4); CD(H,5); CD(I,6); CD(Ip,7); CD(K,8); 
	              CD(8,9); CD(-8,10); CD(M,11); CD(N,12); CD(Q,13); default: return ulf; break; }
         if(abs(Lp)<8)
	 {  // S         D          F          G          G'         H          I          I'         K   (40')    L   U
            double t[]={0,0,       -1.,        0,         0,         0,         0,         0,         0,        // S  (40)
              0,         0.2857143,-5./24.,    0.1238536,-0.1154321,-4./15.,    0,         0,         0,        // D
              0.1428571, 0.1488095,-1./24.,   -0.2381153,-0.0524691, 1./12.,   -0.2242005, 0.0685484, 0,        // F
              0,         0.0688076, 0.1852008,-0.0121252, 0.2623457, 0.0001319, 0.0323687, 0.3861841, 0.0528361,// G
              0,        -0.0641289, 0.0408093, 0.2623457, 0.0196409, 0.3453097,-0.2286827,-0.0000108, 0.0390720,// G'
              0,         4./33.,    0.0530303,-0.0001079,-0.2825261, 0,        -0.0835777, 0.1566820,-0.1195887,// H
              0,         0,         0.1207234, 0.0224091,-0.1583188, 0.0707196,-0.1251951,-0.1120361,-0.0000893,// I
              0,         0,        -0.0369107, 0.2673582,-0.0000075,-0.1325771,-0.1120361, 0.0238388, 0.1021749,// I'
              0,         0,         0,        -0.0317016,-0.0234432,-0.0876984, 0.0000774,-0.0885516, 0.4460784,// K
              0,         0,         0,         0,         0,         0.0007237,-0.0308923,-0.1396655,-0.2060509,// L
              0,         0,         0,         0,         0,         0.1178660, 0.1942421, 0.0071072,-0.0081091,// L'
              0,         0,         0,         0,         0,         0,        -0.0657541, 0.0911117, 0.0006419,// M
              0,         0,         0,         0,         0,         0,         0,         0,         0.0563725,// N
              0,         0,         0,         0,         0,         0,         0,         0,         0};       // Q
            if(Lp==S)       { ulf = t[id*9]; }   else if(Lp==D)  { ulf = t[id*9+1]; } else if(Lp==F)  { ulf = t[id*9+2]; }
	    else if(Lp==G)  { ulf = t[id*9+3]; } else if(Lp==Gp) { ulf = t[id*9+4]; } else if(Lp==H)  { ulf = t[id*9+5]; }
	    else if(Lp==I)  { ulf = t[id*9+6]; } else if(Lp==Ip) { ulf = t[id*9+7]; } else if(Lp==K)  { ulf = t[id*9+8]; }
         }
         else
         {  // L         L'         M          N          Q   (40')      L   U
            double t[]={0,0,        0,         0,         0,          // S  (40)
              0,         0,         0,         0,         0,          // D
              0,         0,         0,         0,         0,          // F
              0,         0,         0,         0,         0,          // G
              0,         0,         0,         0,         0,          // G'
             -0.0011185,-0.1821565, 0,         0,         0,          // H
             -0.0403976, 0.2540089, 0.0961021, 0,         0,          // I
             -0.1826394, 0.0092941,-0.1331633, 0,         0,          // I'
              0.2335244, 0.0091903, 0.0008131,-0.0789216, 0,          // K
              0.2883281, 0.0208117, 0.1735057, 0.1400221, 0,          // L
              0.0208117,-0.2290154, 0.2473821,-0.1754663, 0,          // L'
             -0.1552419,-0.2213419, 0.0644855, 0.3296526,-0.0717703,  // M
              0.1133512,-0.1420442,-0.2982571, 0.1208238, 0.2691511,  // N
              0,         0,         0.0545455, 0.2260869, 0.7193676}; // Q
            if(Lp==8)       { ulf = t[id*5]; }   else if(Lp==-8) { ulf = t[id*5+1]; } else if(Lp==M)  { ulf = t[id*5+2]; }
            else if(Lp==N)  { ulf = t[id*5+3]; } else if(Lp==Q)  { ulf = t[id*5+4]; }
         }
      }
   } // if(Up.isequal(40))
   if(ulf==0) { return ulf; }
   else { 
   //std::cout << sqrt(fabs(ulf))*(ulf/fabs(ulf)) << "\t"; 
   return sqrt(fabs(ulf))*(ulf/fabs(ulf)); }
}

// --------------------------------------------------------------------------------------------------------------- //
// Looks up the value of the coefficient (WU | W'U'+f), in tables from Racah and Wybourne (see refs above).
// --------------------------------------------------------------------------------------------------------------- //
double racah_wupf(qR7 W, qG2 U, qR7 Wp, qG2 Up)
{
   double wupf = 0;
   int id = -1;
                                                                                                                 /*
W'(000)(100)  (110)  (200)    (111)             (210)                   (211)                     (220)
U'(00) (10) (10)(11) (20) (00)(10)(20)   (11) (20) (21)     (10) (11) (20) (21) (30)          (20) (21) (22)        U  W
t=[0   1    0    0   0    0    0    0    0     0     0     0     0     0    0    0            0     0    0;       % 00 000
   1   0   1/3  2/3  1    0    0    0    0     0     0     0     0     0    0    0            0     0    0;       % 10 100
   0   1    0    0   0  3/35  2/5 18/35 2/5   3/5    0     0     0     0    0    0            0     0    0;       % 10 110
   0   1    0    0   0    0 -1/10 -9/10  0   3/35  32/35   0     0     0    0    0            0     0    0;       % 11 
   0   1    0    0   0    0    0    0  2/15  9/35  64/105  0     0     0    0    0            0     0    0;       % 20 200
   0   0    1    0   0    0   -1    0    0     0     0    [1     0     0    0    0]./1        0     0    0;       % 00 111
   0   0   2/3 -1/3  0  -1/7 -3/8 27/56  0     0     0   [-1     8    15    0    0]./24       0     0    0;       % 10
   0   0   2/9 -7/9  0    0   1/8 -7/8   0     0     0    [1   -56   135 2560 3080]./5832     0     0    0;       % 20
   0   0    1    0   1    0    0    0    0     0     0   [-7     0    15   20    0]./42    9/14 -5/14    0;       % 11 210
   0   0   7/9  2/9  1    0    0    0    0     0     0   [98   448   270 -500  385]./1701  -2/7   5/7    0;       % 20
   0   0    0    1   1    0    0    0    0     0     0    [0    -7   -60  220  385]./672     [9   880 2695]./3584;% 21
   0   0    0    0   0 27/35 -9/40 1/280 -3/5 2/5    0   [-5    40   -27    0    0]./72       0     0    0;       % 10 211
   0   0    0    0   0    0  9/10 -1/10  0   32/35 -3/35 [35     0   -27   64    0]./126      0     0    0;       % 11
   0   0    0    0   0    0   7/8  1/8  1/3   2/7  -8/21 [-245 -280 -867 -512  616]./2520     0     0    0;       % 20
   0   0    0    0   0    0    0    1  3/16 -25/112 33/56 [0    35   -27 -176   77]./315      0     0    0;       % 21
   0   0    0    0   0    0    0    1    0    1/7   6/7   [0     0    27   64 -224]./315      0     0    0;       % 30
   0   0    0    0   0    0    0    0  8/15 -16/35  1/105  0     0     0    0    0            0     0    0;       % 20 220
   0   0    0    0   0    0    0    0  -1/8  27/56 11/28   0     0     0    0    0            0     0    0;       % 21
   0   0    0    0   0    0    0    0    0     0     1     0     0     0    0    0            0     0    0;       % 22
   0   0    0    0   0    0    0    0    0     0     0    [8     1     0    0    0]./9       -1     0    0;       % 10 221
   0   0    0    0   0    0    0    0    0     0     0   [35     0    27   -1    0]./63    5/14  9/14    0;       % 11
   0   0    0    0   0    0    0    0    0     0     0    [0    35   -24    4    0]./63     5/7   2/7    0;       % 20
   0   0    0    0   0    0    0    0    0     0     0    [0   385 -1188  100 -343]./2016 [-165 -3888 1323]./5376;% 21
   0   0    0    0   0    0    0    0    0     0     0    [0     0     0    7    2]./9    -5/14  9/14    0;       % 30
   0   0    0    0   0    0    0    0    0     0     0    [0     0     0    1    2]./3        0  -1/6  5/6];      % 31
%                                                                                                ^     ^    ^
% Partially reassembled from tabulated cfp listed in Neilson and Koster, 1963  ------------------|-----|-----|
% Table continues below, reconstructed from tabulated cfp and also from the code of Allison and McNulty CPC 8 (1974) 246
% And also using the reciprocity relations (Judd, Op. Techniques in At. Spectr., p.181, eq 7-36). */

   if(Wp.isequal(000) && Up.isequal(00) && W.isequal(100) && U.isequal(10)) { wupf = 1.; }
#define EQ(uw,v) uw.isequal(v)
   else if((EQ(Wp,100)&&EQ(Up,10))&&((EQ(W,000)&&EQ(U,00))||(EQ(W,110)&&(EQ(U,10)||EQ(U,11)))||
           (EQ(W,200)&&EQ(U,20)))) { wupf=1.; }
   else if((EQ(Wp,200)&&EQ(Up,20))&&((EQ(W,100)&&EQ(U,10))||(EQ(W,210)&&(EQ(U,11)||EQ(U,20)||EQ(U,21))))) 
     { wupf = 1.; }
   else if(Wp.isequal(110))
   {
#define UW(w,u,i) else if(W.isequal(w)&&U.isequal(u)) id=i
      if(W.isequal(000)&&U.isequal(00)) id=0; UW(100,10,1); UW(110,10,2); UW(110,11,3); UW(200,20,4);
         UW(111,00,5); UW(111,10,6); UW(111,20,7); UW(210,11,8); UW(210,20,9); UW(210,21,10); 
      else { return wupf; }
      if(Up.isequal(10)) { double t[] = {0,1./3,0,0,0,1.,2./3,2./9,1.,7./9,0}; wupf = t[id]; }
      else if(Up.isequal(11)) { double t[] = {0,2./3,0,0,0,0,-1./3,-7./9,0,2./9,1.}; wupf = t[id]; }
   }
   else if(Wp.isequal(111))
   {
      if(W.isequal(110)&&U.isequal(10)) id=0; UW(110,11,1); UW(200,20,2); UW(111,00,3); UW(111,10,4);
         UW(111,20,5); UW(210,11,6); UW(210,20,7); UW(210,21,8); UW(211,10,9); UW(211,11,10); 
	 UW(211,20,11); UW(211,21,12); UW(211,30,13); else { return wupf; }
      //           (110)(10)(11) (200)(20) (111)(00)(10)(20) (210)(11)(20)(21)  (211)(10)(11)(20)(21)(30)
      double t[] = { 3./35,    0,    0,    0, -1./7,    0,    0,    0,    0, 27./35,    0,    0,    0,    0,   // (00)
                      2./5, -1./10,  0,  -1., -3./8,   1./8,  0,    0,    0, -9./40,  9./10, 7./8,  0,    0,   // (10)
                    18./35, -9./10,  0,    0, 27./56, -7./8,  0,    0,    0, 1./280, -1./10, 1./8,  1.,   1.}; // (20)
      if(Up.isequal(00)) { wupf = t[id]; }
      else if(Up.isequal(10)) { wupf = t[id+14]; }
      else if(Up.isequal(20)) { wupf = t[id+28]; }
   }
   else if(Wp.isequal(210))
   {
      if(W.isequal(110)&&U.isequal(10)) id=0; UW(110,11,1); UW(200,20,2); UW(211,10,3); UW(211,11,4);
         UW(211,20,5); UW(211,21,6); UW(211,30,7); UW(220,20,8); UW(220,21,9); UW(220,22,10); 
      else { return wupf; }
      //  WU      (110)(10)(11)  (200)(20)   .--(211)(10)(11)(20)(21)(30)--.     (220)(20)(21)(22)         W'    U'
      double t[] = { 2./5,    0,   2./15, -3./5,    0,    1./3,   3./16,   0,   8./15,   -1./8,    0,  // (210) (11)
                     3./5, 3./35,  9./35,  2./5, 32./35,  2./7, -25./112, 1./7, -16./35, 27./56,   0,  //       (20)
                      0,  32./35, 64./105,  0,   -3./35, -8./21, 33./56,  6./7,  1./105, 11./28,  1.}; //       (21)
      if(Up.isequal(11)) { wupf = t[id]; }
      else if(Up.isequal(20)) { wupf = t[id+11]; }
      else if(Up.isequal(21)) { wupf = t[id+22]; }
   }
   else if(Wp.isequal(211))
   {
      if(W.isequal(111)&&U.isequal(00)) id=0; UW(111,10,1); UW(111,20,2); UW(210,11,3); UW(210,20,4);
         UW(210,21,5); UW(211,10,6); UW(211,11,7); UW(211,20,8); UW(211,21,9); UW(211,30,10);
	 UW(221,10,11); UW(221,11,12); UW(221,20,13); UW(221,21,14); UW(221,30,15); UW(221,31,16); 
      else { return wupf; }
      //   UW     (111)(00)(10)(20)   (210)(11)(20)(21)    (211)(10)(11)(20)(21)(30)      (221)(10)(11)(20)(21)(30)(31)
      double t[] = {1., -1.,    1.,   -7.,   98.,    0,  -5.,  35., -245.,    0,    0,   8.,  35.,    0,     0,   0,   0, // 10
                    0,   8.,  -56.,     0,  448.,  -7.,  40.,    0, -280.,  35.,    0,   1.,    0,  35.,  385.,   0,   0, // 11
                    0,  15.,  135.,   15.,  270., -60., -27., -27., -867., -27.,  27.,    0,  27., -24.,-1188.,   0,   0, // 20
                    0,    0, 2560.,   20., -500., 220.,    0,  64., -512.,-176.,  64.,    0,  -1.,   4.,  100.,  7.,  1., // 21
                    0,    0, 3080.,     0,  385., 385.,    0,    0,  616.,  77.,-224.,    0,    0,    0, -343.,  2.,  2.};// 30
      double den[]={1., 24., 5832.,   42., 1701., 672.,  72., 126., 2520., 315., 315.,   9.,  63.,  63., 2016.,  9.,  3.};
      if(Up.isequal(10)) { wupf = t[id]/den[id]; }
      else if(Up.isequal(11)) { wupf = t[id+17]/den[id]; }
      else if(Up.isequal(20)) { wupf = t[id+34]/den[id]; }
      else if(Up.isequal(21)) { wupf = t[id+51]/den[id]; }
      else if(Up.isequal(30)) { wupf = t[id+68]/den[id]; }
   }
   else if(Wp.isequal(220))
   {
      if(W.isequal(210)&&U.isequal(11)) id=0; UW(210,20,1); UW(210,21,2); UW(221,10,3); UW(221,11,4);
         UW(221,20,5); UW(221,21,6); UW(221,30,7); UW(221,31,8); else { return wupf; }
      //   UW         (210)(11)(20)(21)           (221)(10)(11)(20)(21)(30)(31)
      double t[] = { 9./14, -2./7,    9.,    -1., 5./14, 5./7,  -165., -5./14,     0,  // (220) (20)
                    -5./14,  5./7,  880.,      0, 9./14, 2./7, -3888.,  9./14, -1./6,  //       (21)
                         0,     0, 2695.,      0,     0,    0,  1323.,      0,  5./6}; //       (22)
      double den[]={    1.,    1., 3584.,     1.,    1.,   1.,  5376.,     1.,    1.};
      if(Up.isequal(20)) { wupf = t[id]/den[id]; }
      else if(Up.isequal(21)) { wupf = t[id+9]/den[id]; }
      else if(Up.isequal(22)) { wupf = t[id+18]/den[id]; }
   }
   else if(Wp.isequal(221))
   {
      if(W.isequal(211)&&U.isequal(10)) id=0; UW(211,11,1); UW(211,20,2); UW(211,21,3); UW(211,30,4);
         UW(220,20,5); UW(220,21,6); UW(220,22,7); UW(221,10,8); UW(221,11,9); UW(221,20,10); 
	 UW(221,21,11); UW(221,30,12); UW(221,31,13); UW(222,00,14); UW(222,10,15); UW(222,20,16); 
	 UW(222,30,17); UW(222,40,18); else { return wupf; }
      //W'                          (221)                                    %  U  W
      //U'    (10)     (11)      (20)       (21)       (30)       (31)       %
      double t[]={4./9, 5./9,     0,         0,         0,         0,        // 10 211
              1./36,    0,        15./28,    55./126,   0,         0,        // 11
              0,        1./9,    -4./21,    -44./63,    0,         0,        // 20
              0,       -1./576,   3./224,    25./1008,  539./1152, 63./128,  // 21
              0,        0,        0,        -7./99,     1./9,      81./99,   // 30
             -28./243,  20./243,  20./63,   -55./1701, -110./243,  0,        // 20 220
              0,        1./16,    3./56,    -9./28,     11./32,   -7./32,    // 21
              0,        0,        0,         9./99,     0,         90./99,   // 22
              5./36,   -1./9,     3./4,      0,         0,         0,        // 10 221
             -1./18,    0,       -27./70,    176./315,  0,         0,        // 11
              7./36,   -1./5,    -35./300,   0,        -44./90,    0,        // 20
              0,        11./90,   0,        -224./495, -5./36,     63./220,  // 21
              0,        0,       -36./210,  -80./693,  -242./360,  9./220,   // 30
              0,        0,        0,         16./165,   1./60,    -117./132, // 31
              1.,       0,        0,         0,         0,         0,        // 00 222
              5./12,   -1./3,    -1./4,      0,         0,         0,        // 10
              55./972, -77./243,  121./396, -64./243,   14./243,   0,        // 20
              0,        0,        66./462,   128./231, -1./6,      3./22,    // 30
              0,        0,        0,         0,         1./4,      3./4};    // 40
      if(Up.isequal(10)) { wupf = t[id*6]; }
      else if(Up.isequal(11)) { wupf = t[id*6+1]; }
      else if(Up.isequal(20)) { wupf = t[id*6+2]; }
      else if(Up.isequal(21)) { wupf = t[id*6+3]; }
      else if(Up.isequal(30)) { wupf = t[id*6+4]; }
      else if(Up.isequal(31)) { wupf = t[id*6+5]; }
   }
   else if(Wp.isequal(222))
   {
      if(W.isequal(221)&&U.isequal(10)) id=0; UW(221,11,1); UW(221,20,2); UW(221,21,3); UW(221,30,4);
         UW(221,31,5); UW(222,00,6); UW(222,10,7); UW(222,20,8); UW(222,30,9); UW(222,40,10); 
      else { return wupf; }
      //  W'                       (222)                         %  U  W
      //  U'    (00)     (10)      (20)     (30)     (40)        %
      double t[]={9./49, 15./28,  55./196,   0,        0,        // 10 221
                 0,      -3./14, -11./14,    0,        0,        // 11
                 0,      -1./12,  11./28,   11./21,    0,        // 20
                 0,       0,      -1./7,     6./7,     0,        // 21
                 0,       0,       2./77,   -3./14,    117./154, // 30
                 0,       0,       0,        1./14,    13./14,   // 31
                 0,      -1.,      0,        0,        0,        // 00 222
                -1./7,   -3./20,  99./140,   0,        0,        // 10
                 0,      11./60,  -7./20,    7./15,    0,        // 20
                 0,       0,       9./55,   -3./5,    -13./55,   // 30
                 0,       0,       0,       -1./10,   -9./10};   // 40
      if(Up.isequal(00)) { wupf = t[id*5]; }
      else if(Up.isequal(10)) { wupf = t[id*5+1]; }
      else if(Up.isequal(20)) { wupf = t[id*5+2]; }
      else if(Up.isequal(30)) { wupf = t[id*5+3]; }
      else if(Up.isequal(40)) { wupf = t[id*5+4]; }
   }
   if(wupf!=0) wupf = sqrt(fabs(wupf))*(wupf/fabs(wupf)); 
   return wupf;
}

// --------------------------------------------------------------------------------------------------------------- //
// Calculates the coefficient of fractional parentage for a particular f-electron state
// --------------------------------------------------------------------------------------------------------------- //
double racah_cfp(int n, qG2 U, int v, int S2, orbital L, qG2 Up, int vp, int S2p, orbital Lp)
{
   double cfp = 0;
   int nn = n,it; qG2 Ut; orbital Lt;
   if(n>7) { n=14-n; n++; it=v;v=vp;vp=it; it=S2;S2=S2p;S2p=it; Lt=L;L=Lp;Lp=Lt; Ut=U;U=Up;Up=Ut; }
   if(n<0) { throw std::runtime_error("racah_cfp: n<0 or n>14 not allowed for f-electrons."); }
   qR7 W = racah_vtow(S2,v);
   qR7 Wp = racah_vtow(S2p,vp);
   double ulf = racah_ulf(U,L,Up,Lp); if(ulf==0) return cfp;
   double wupf = racah_wupf(W,U,Wp,Up); if(wupf==0) return cfp;
   
   if(n==v)
   {
      if(S2p==(S2-1))
         cfp = sqrt( (v+S2+2.)*(S2/2.) / (v*(S2+1.)) ) * ulf * wupf;
      else if(S2p==(S2+1))
         cfp = sqrt( (v-S2)*(S2/2.+1.) / (v*(S2+1.)) ) * ulf * wupf;
   }
   else if(vp==(v-1))
   {
      if(S2p==(S2-1))
         cfp = sqrt( (16.-n-v)*(v+S2+2.)*(S2/2.) / (2.*n*(8.-v)*(S2+1.)) ) * ulf * wupf;
         //cfp = sqrt( (4.*abs(L)+4.-n-v)*(v+S2+2.)*(S2/2.) / (2.*n*(2.*abs(L)+2.-v)*(S2+1.)) ) * ulf * wupf;
      else if(S2p==(S2+1))
         cfp = sqrt( (16.-n-v)*(v-S2)*(S2/2.+1)  / (2.*n*(8.-v)*(S2+1.)) ) * ulf * wupf;
         //cfp = sqrt( (4.*abs(L)+4.-n-v)*(v-S2)*(S2/2.+1)  / (2.*n*(2.*abs(L)+2.-v)*(S2+1.)) ) * ulf * wupf;
   }
   else if(vp==(v+1))
   {
      if(S2p==(S2-1))
         cfp = sqrt( (n-v)*(18.-v+S2)*(S2/2.)    / (2.*n*(8.-v)*(S2+1.)) ) * ulf * wupf; 
         //cfp = sqrt( (n-v)*(4.*abs(L)+6.-v+S2)*(S2/2.)    / (2.*n*(2.*abs(L)+2.-v)*(S2+1.)) ) * ulf * wupf; 
      else if(S2p==(S2+1))
         cfp = sqrt( (n-v)*(16.-v-S2)*(S2/2.+1)  / (2.*n*(8.-v)*(S2+1.)) ) * ulf * wupf; 
         //cfp = sqrt( (n-v)*(4.*abs(L)+4.-v-S2)*(S2/2.+1)  / (2.*n*(2.*abs(L)+2.-v)*(S2+1.)) ) * ulf * wupf; 
   }

   if(v%2==0)     // v is even
      cfp = cfp * pow(-1.,S2p/2.+(vp-v)/2.);
   else           // v is odd
      cfp = cfp * pow(-1.,S2p/2.);

   if(nn>7)
   {
      // Formula for cfp of more than half filled subshell in terms of less than half filled subshells is:
      //                                                                                 1/2
      //   4l+1-n         4l+2-n               S+S'+L+L'-l-1/2 {   (n+1)(2S+1)(2L+1)    }      n            n+1
      // (l       aSL |} l       a'S'L') = (-1)                { ---------------------- }    (l  a'S'L' |} l    aSL)
      //                                                       { (4l+2-n)(2S'+1)(2L'+1) }
      //
      // Ref: A.F. Starace, Phys. Rev. A v27, p572 (1983)
      cfp *= ( pow(-1.,(S2+S2p)/2.+abs(L)+abs(Lp)-3.-.5) * sqrt((14.-nn+1.)*(S2+1.)*(2.*abs(L)+1.)/nn/(S2p+1.)/(2.*abs(Lp)+1.)) );
      if(nn==8) cfp *= pow(-1.,(v-1.)/2.); 
   }

   return cfp;
}
double racah_cfp(int n, std::string child, std::string parent)
{
   fconf conf_chl(n,(orbital)3);
   fconf conf_par(n-1,(orbital)3);
   int num_states_chl = (int)conf_chl.states.size();
   int num_states_par = (int)conf_par.states.size();
   int i;
   qG2 U,Up;
   int v,vp,S2,S2p;
   orbital L,Lp;

   for(i=0; i<num_states_chl; i++)
      if(child.compare(conf_chl.states[i].id)==0) break;
   U = conf_chl.states[i].U; v = conf_chl.states[i].v; S2 = conf_chl.states[i].S2; L = conf_chl.states[i].L;
   for(i=0; i<num_states_par; i++)
      if(parent.compare(conf_par.states[i].id)==0) break;
   Up = conf_par.states[i].U; vp = conf_par.states[i].v; S2p = conf_par.states[i].S2; Lp = conf_par.states[i].L;

   return racah_cfp(n,U,v,S2,L,Up,vp,S2p,Lp);
}
// --------------------------------------------------------------------------------------------------------------- //
// Calculates the coefficient of fractional parentage for a particular d-electron state
// --------------------------------------------------------------------------------------------------------------- //
double racah_cfp(int n, int v, int S2, orbital L, int vp, int S2p, orbital Lp)
{
   double cfp = 0.;
   int nn=n,it,id=-1;
   orbital Lt;

   if(n>5) { n=10-n; n++; it=v;v=vp;vp=it; it=S2;S2=S2p;S2p=it; Lt=L;L=Lp;Lp=Lt; }
   if(n<0) { throw std::runtime_error("racah_cfpd: n<0 or n>10 not allowed for d-electrons."); }

   switch (n) // Looks up table of cfp from Neilson and Koster, 1963
   {
      case 2:
         if(S2p==1 && Lp==D)   // d^1 has only one state: 2D
         {
            if(S2==2) { if(L==P || L==F) cfp = 1.; }                // 3P 2D 1  // 3F 2D 1
            else if(S2==0) { if(L==S || L==D || L==G) cfp = 1.; }   // 1S 2D 1  // 1D 2D 1  // 1G 2D 1
         }
         break;
      case 3:
         if(S2==3)
         {
            if(L==P && S2p==2) { if(Lp==P) cfp = -sqrt(8./15); else if(Lp==F) cfp = -sqrt(7./15); }
                                 // 4P  3P  -1   3 -1 -1            // 4P  3F  -1  0 -1 -1 1
            if(L==F && S2p==2) { if(Lp==P) cfp = -sqrt(1./5);  else if(Lp==F) cfp = sqrt(4./5); }
                                 // 4F  3P  -1   0 0 -1             // 4F  3F   1  2 0 -1
         }
         else if(S2==1)
         {
            if(L==P) { if(S2p==2) { if(Lp==P) cfp = sqrt(7./30); else if(Lp==F) cfp = -sqrt(4./15); }
                                 // 2P  3P   1   -1 -1 -1 1         // 2P  3F  -1  2 -1 -1
                       else if(S2p==0 && Lp==D) cfp = sqrt(1./2); } // 2P  1D   1  -1
       else if(L==D) { if(v==1) {
	               if(S2p==2) { if(Lp==P) cfp = -sqrt(3./20); else if(Lp==F) cfp = -sqrt(7./20); }
                                 // 2D1 3P  -1   -2 1 -1            // 2D1 3F  -1  -2 0 -1 1
                  else if(S2p==0) { if(Lp==S) cfp = sqrt(4./15); else if(Lp==D) cfp = -sqrt(1./12); else if(Lp==G) cfp = -sqrt(3./20); } }
                                 // 2D1 1S   1    2 -1 -1           // 2D1 1D  -1  -2 -1             // 2D1 1G  -1  -2 1 -1
                  else if(v==3) {
	               if(S2p==2) { if(Lp==P) cfp = -sqrt(7./20); else if(Lp==F) cfp = sqrt(3./20); }
                                 // 2D2 3P  -1   -2 0 -1 1          // 2D2 3F   1  -2 1 -1
                  else if(S2p==0) { if(Lp==D) cfp = sqrt(9./28); else if(Lp==G) cfp = -sqrt(5./28); } }
                                 // 2D2 1D   1   -2 2 0 -1          // 2D2 1G  -1  -2 0 1 -1
            }
       else if(L==F) { if(S2p==2) { if(Lp==P) cfp = sqrt(2./5); else if(Lp==F) cfp = sqrt(1./10); }
                                 // 2F  3P   1   1 0 -1             // 2F  3F   1  -1 0 -1
                  else if(S2p==0) { if(Lp==D) cfp = -sqrt(1./7); else if(Lp==G) cfp = -sqrt(5./14); } }
                                 // 2F  1D  -1   0 0 0 -1           // 2F  1G  -1  -1 0 1 -1
       else if(L==G) { if(S2p==0) { if(Lp==D) cfp = -sqrt(5./21); else if(Lp==G) cfp = sqrt(11./42); }
                                 // 2G  1D  -1   0 -1 1 -1          // 2G  1G   1  -1 -1 0 -1 1
                       else if(S2p==2 && Lp==F) cfp = sqrt(1./2); } // 2G  3F   1  -1
       else if(L==H) { if(S2p==2 && Lp==F) cfp = -sqrt(1./2); else if(S2p==0 && Lp==G) cfp = sqrt(1./2); }
                                 // 2H  3F  -1   -1                 // 2H  1G   1  -1
         }
         break;
      case 4:
         if(S2==4 && L==D) { if(S2p==3) { if(Lp==P) cfp = sqrt(3./10); else if(Lp==F) cfp = sqrt(7./10); } }
                                 // 5D  4P   1   -1 1 -1            // 5D  4F   1  -1 0 -1 1
                                 //     4P       4F       2P      2D1       2D2        2F       2G       2H
    else if(S2==2) { double t[] = {-8./45., -7./45., -7./180.,  3./8.,  -7./72.,  -7./45.,      0,         0,  // 3P1
                                   -7./45.,  8./45.,  5./18.,      0,    1./9.,   -5./18.,      0,         0,  // 3P2
                                    7./30., -1./10., -1./15.,      0,    2./7.,   -1./10.,   3./14.,       0,  // 3D
                                   -1./15.,  4./15.,  2./105.,  3./8.,   1./56.,  -1./60.,   3./28.,  11./84., // 3F1
                                   -4./15., -1./15., -5./42.,      0,    1./14.,  -5./48., -27./112., 11./84., // 3F2
                                        0,  -1./3.,       0,       0,    5./42.,   3./16.,  99./560., 11./60., // 3G
                                        0,   1./3.,       0,       0,        0,    1./12.,  -3./20.,  13./30.};// 3H
            if(S2p==3) { if(Lp==P) id = 0; else if(Lp==F) id = 1; }
       else if(S2p==1) { if(Lp==D) { if(vp==1) id=3; else if(vp==3) id=4; } else { switch(Lp) { CD(P,2); CD(F,5); CD(G,6); CD(H,7); default: return cfp; } } }
	    if(id!=-1) { if(L==P) { if(v==2) cfp = t[id];    else if(v==4) cfp = t[id+8]; } 
	            else if(L==F) { if(v==2) cfp = t[id+24]; else if(v==4) cfp = t[id+32]; } 
	            else { switch(L) { case D: cfp = t[id+16]; break; case G: cfp = t[id+40]; break; case H: cfp = t[id+48]; break; default: return cfp; } }
               cfp = sqrt(fabs(cfp))*sign(cfp); }
         }                       //     2P      2D1      2D2       2F        2G        2H
    else if(S2==0) { double t[] = {     0,     1.,       0,        0,        0,         0,    // 1S1
                                        0,      0,      1.,        0,        0,         0,    // 1S2
                                   -3./20.,  3./8.,   9./56.,   1./10.,   -3./14.,      0,    // 1D1
                                    3./10.,     0,    1./7.,    9./20.,    3./28.,      0,    // 1D2
                                    3./14.,     0,    5./14.,  -3./16.,   -3./560.,-33./140., // 1F
                                        0,   3./8., -25./504.,  5./36.,   11./84., -11./36.,  // 1G1
                                        0,      0,   11./126., 55./144.,-169./336., -1./36.,  // 1G2
                                        0,      0,        0,       0,      3./10.,   7./10.}; // 1I
            if(S2p==1) { if(Lp==D) { if(vp==1) id=1; else if(vp==3) id=2; } else { switch(Lp) { CD(P,0); CD(F,3); CD(G,4); CD(H,5); default: return cfp; } } }
	    if(id!=-1) { if(L==S)  { if(v==0) cfp = t[id];    else if(v==4) cfp = t[id+6]; } 
	            else if(L==D)  { if(v==2) cfp = t[id+12]; else if(v==4) cfp = t[id+18]; } else if(L==F)  cfp = t[id+24];
	            else if(L==G)  { if(v==2) cfp = t[id+30]; else if(v==4) cfp = t[id+36]; } else if(L==I)  cfp = t[id+42];
               cfp = sqrt(fabs(cfp))*sign(cfp); }
         }
         break;
      case 5:
         if(S2==5 && L==S && S2p==4 && Lp==D) cfp = 1.; // 6S  5D  1
                                 //     5D      3P1      3P2       3D       3F1       3F2       3G       3H
    else if(S2==3) { double t[] = {-1./4., -16./75.,  7./150.,  7./60.,-14./75.,  14./75.,      0,        0,  // 4P
                                   -1./4.,       0,   9./50., -27./140.,     0,   -3./25.,   9./35.,      0,  // 4D
                                   -1./4.,  -2./25., -4./175., -3./140., 8./25.,   1./50.,  -9./70.,-11./70., // 4F
                                   -1./4.,       0,        0,   5./84.,      0,   -1./6.,  -11./70., 11./30}; // 4G
            switch(L) { CD(P,0); CD(D,1); CD(F,2); CD(G,3); default: return cfp; }
  	    if(S2p==4) cfp = t[id*8]; else if(S2p==2) {
	       if(Lp==P) { if(vp==2) cfp = t[id*8+1]; else if(vp==4) cfp = t[id*8+2]; } else if(Lp==D) cfp = t[id*8+3];
	  else if(Lp==F) { if(vp==2) cfp = t[id*8+4]; else if(vp==4) cfp = t[id*8+5]; } else if(Lp==G) cfp = t[id*8+6]; else if(Lp==H) cfp = t[id*8+7]; }
               cfp = sqrt(fabs(cfp))*sign(cfp);
         }                       //    3P1      3P2       3D      3F1       3F2        3G       3H    1S1     1S2      1D1      1D2       1F      1G1      1G2       1I
    else if(S2==1) { double t[] = {     0,       0,   3./5.,       0,        0,        0,       0,      0,      0,       0,  -2./5.,       0,       0,       0,       0,   // 2S
                                    7./75.,  1./6.,   1./15.,  -8./75., -1./6.,        0,       0,      0,      0,   1./5.,   1./10., -1./10.,      0,       0,       0,   // 2P
                                   -9./50.,      0,        0, -21./50.,      0,        0,       0,  3./25.,     0,  -1./10.,      0,       0,  -9./50.,      0,       0,   // 2D1
                                   -7./50., -1./25.,  6./35.,   3./50., -3./50.,   9./70.,      0,      0, -1./25.,  9./70., -1./35.,  1./10., -1./14., -11./350.,    0,   // 2D2
                                        0,   9./50.,  3./35.,      0,   27./100.,  9./140.,     0,      0, -2./25.,      0,   9./70.,  1./20.,      0,   99./700.,    0,   // 2D3
                                    4./25., -1./14.,  3./70.,   1./25., -1./16., -81./560., 11./140.,   0,      0,  -2./35.,  9./140., 3./80., -1./7.,   11./112.,    0,   // 2F1
                                        0,   9./70.,  3./14.,      0,   -9./80.,  -9./2800,-99./700.,   0,      0,       0,  -1./28., -3./16.,      0,   99./560.,    0,   // 2F2
                                        0,       0,   1./14.,   1./5.,   9./80., 297./2800, 11./100.,   0,      0,  -2./21., -1./84., -1./1200,11./105.,169./1680,-13./150,// 2G1
                                        0,       0,  11./210.,     0,   11./48.,-169./560., -1./60.,    0,      0,       0,  11./140,-11./80.,      0,  -81./1232,-13./110,// 2G2
                                        0,       0,        0,  -1./5.,   1./20.,  -9./100., 13./50.,    0,      0,       0,       0,   3./100., 1./5.,   -1./220., 91./550,// 2H
                                        0,       0,        0,      0,        0,    9./50.,  21./50.,    0,      0,       0,       0,       0,       0,   -9./110, -7./22}; // 2I
            switch(L) { CD(S,0); CD(P,1); CD(H,9); CD(I,10); default: if(L==D) { if(v==1) id=2; else if(v==3) id=3; else if(v==5) id=4; }
            else if(L==F) { if(v==3) id=5; else if(v==5) id=6; } else if(L==G) { if(v==3) id=7; else if(v==5) id=8; } }
	    if(id!=-1) { if(S2p==2) {
               if(Lp==P) { if(vp==2) cfp = t[id*15];   else if(vp==4) cfp = t[id*15+1]; } else if(Lp==D) cfp = t[id*15+2];
          else if(Lp==F) { if(vp==2) cfp = t[id*15+3]; else if(vp==4) cfp = t[id*15+4]; } else if(Lp==G) cfp = t[id*15+5]; else if(Lp==H) cfp = t[id*15+6]; }
                         if(S2p==0) {
               if(Lp==S) { if(vp==0) cfp = t[id*15+7]; else if(vp==4) cfp = t[id*15+8]; } 
          else if(Lp==D) { if(vp==2) cfp = t[id*15+9]; else if(vp==4) cfp = t[id*15+10];} else if(Lp==F) cfp = t[id*15+11];
          else if(Lp==G) { if(vp==2) cfp = t[id*15+12];else if(vp==4) cfp = t[id*15+13];} else if(Lp==I) cfp = t[id*15+14]; }
               cfp = sqrt(fabs(cfp))*sign(cfp); }
         }
         break;
      default:
         return cfp;
   }

   if(nn>5)
   {
      // Formula for cfp of more than half filled subshell in terms of less than half filled subshells is:
      //                                                                                 1/2
      //   4l+1-n         4l+2-n               S+S'+L+L'-l-1/2 {   (n+1)(2S+1)(2L+1)    }      n            n+1
      // (l       aSL |} l       a'S'L') = (-1)                { ---------------------- }    (l  a'S'L' |} l    aSL)
      //                                                       { (4l+2-n)(2S'+1)(2L'+1) }
      //
      // Ref: A.F. Starace, Phys. Rev. A v27, p572 (1983)
      cfp *= ( pow(-1.,(S2+S2p)/2.+abs(L)+abs(Lp)-2.-.5) * sqrt((10.-nn+1.)*(S2+1.)*(2.*abs(L)+1.)/nn/(S2p+1.)/(2.*abs(Lp)+1.)) );
      if(nn==6) cfp *= pow(-1.,(v-1.)/2.); 
   }

   return cfp;
}
// --------------------------------------------------------------------------------------------------------------- //
// Calculates the coefficient of fractional parentage for a particular p-electron state
// --------------------------------------------------------------------------------------------------------------- //
double racah_cfp(int n, int S2, orbital L, int S2p, orbital Lp)
{
   double cfp = 0.;
   int nn=n,it,id=-1;
   orbital Lt;

   if(n>3) { n=6-n; n++; it=S2;S2=S2p;S2p=it; Lt=L;L=Lp;Lp=Lt; }
   if(n<0) { throw std::runtime_error("racah_cfpd: n<0 or n>10 not allowed for d-electrons."); }

   switch(n) {
      case 2:
         if(S2p==1 && Lp==P)   // p^1 has only one state: 2P
         {
            if(S2==0) { if(L==S || L==D) cfp = 1.; }
            else if(S2==2 && L==P) cfp = 1.;
         }
	 else return cfp;
         break;
      case 3:  //        1S    3P    1D    (Table 1, Racah 3)
         double t[] = {   0.,   1.,   0.,  // 4S
                          4.,  -9.,  -5.,  // 2P
                          0.,   1.,  -1.}; // 2D
         double d[] = {   1.,  18.,   2.}; // Denominators
         if(S2==3 && L==S) id=0; else if(S2==1) { if(L==P) id=1; else if(L==D) id=2; else return cfp; } else return cfp;
         if(S2p==0) { if(Lp==S) cfp=t[id*3]/d[id]; else if(Lp==D) cfp=t[id*3+2]/d[id]; else return cfp; } 
         else if(S2p==2 && Lp==P) cfp=t[id*3+1]/d[id]; else return cfp;
         cfp = sqrt(fabs(cfp))*sign(cfp);
         break;
   }

   if(nn>3)  // Uses Starace's formula (see above) for more than half filled subshell
      cfp *= ( pow(-1.,(S2+S2p)/2.+abs(L)+abs(Lp)-1.-.5) * sqrt((6.-nn+1.)*(S2+1.)*(2.*abs(L)+1.)/nn/(S2p+1.)/(2.*abs(Lp)+1.)) );

   return cfp;
}

// --------------------------------------------------------------------------------------------------------------- //
// Calculates the coefficient of fractional parentage for all the parents of a particular state
// --------------------------------------------------------------------------------------------------------------- //
std::vector<cfpls> racah_parents(int n, int v, qG2 U, int S2, orbital L)
{
   std::vector<cfpls> cfps;
   cfpls entry;
   fconf conf_par(n-1);
   int num_states = (int)conf_par.states.size();
   int i,vp,S2p;
   qG2 Up;
   orbital Lp;
   double cfp_temp;

   for(i=0; i<num_states; i++)
   {
      vp = conf_par.states[i].v; if(abs(v-vp)>1) continue;
      S2p = conf_par.states[i].S2; if(abs(S2-S2p)>1) continue;          // s=1/2 for electrons -> Need: S-Sp<=(1/2)
      Lp = conf_par.states[i].L; if(abs(abs(L)-abs(Lp))>3) continue;    // l=3 for f-electrons -> Need: L-Lp<=3
      cfp_temp = racah_cfp(n,U,v,S2,L,conf_par.states[i].U,vp,S2p,Lp);
      if(cfp_temp!=0.)
      {
	 entry.cfp = cfp_temp; entry.par = conf_par.states[i]; entry.ind = i;
	 cfps.push_back(entry);
      }
   }

   return cfps;
}
std::vector<cfpls> racah_parents(int n, std::string state)
{
   fconf conf(n);
   int num_states = (int)conf.states.size();
   int i;
   qG2 U;
   int v,S2;
   orbital L;

   for(i=0; i<num_states; i++)
      if(state.compare(conf.states[i].id)==0) break;
   U = conf.states[i].U; v = conf.states[i].v; S2 = conf.states[i].S2; L = conf.states[i].L;

   return racah_parents(n,v,U,S2,L);
}
std::vector<cfpls> racah_parents(int n, int v, int S2, orbital L)       // For d-electrons
{
   std::vector<cfpls> cfps;
   cfpls entry;
   int np=n-1; //if(n>5) np = n+1; else np = n-1;
   fconf conf_par(np,D);
   int num_states = (int)conf_par.states.size();
   int i,vp,S2p;
   orbital Lp;
   double cfp_temp;

   for(i=0; i<num_states; i++)
   {
      vp = conf_par.states[i].v; if(abs(v-vp)>1) continue;
      S2p = conf_par.states[i].S2; if(abs(S2-S2p)>1) continue;          // s=1/2 for electrons -> Need: S-Sp<=(1/2)
      Lp = conf_par.states[i].L; if(abs(abs(L)-abs(Lp))>2) continue;    // l=2 for d-electrons -> Need: L-Lp<=2
      cfp_temp = racah_cfp(n,v,S2,L,vp,S2p,Lp);
      if(cfp_temp!=0.)
      {
	 entry.cfp = cfp_temp; entry.par = conf_par.states[i]; entry.ind = i;
	 cfps.push_back(entry);
      }
   }
   return cfps;
}
std::vector<cfpls> racah_parents(int n, int S2, orbital L)              // For p-electrons
{
   std::vector<cfpls> cfps;
   cfpls entry;
   int np=n-1; //if(n>5) np = n+1; else np = n-1;
   fconf conf_par(np,P);
   int num_states = (int)conf_par.states.size();
   int i,S2p;
   orbital Lp;
   double cfp_temp;

   for(i=0; i<num_states; i++)
   {
      S2p = conf_par.states[i].S2; if(abs(S2-S2p)>1) continue;          // s=1/2 for electrons -> Need: S-Sp<=(1/2)
      Lp = conf_par.states[i].L; if(abs(abs(L)-abs(Lp))>1) continue;    // l=1 for d-electrons -> Need: L-Lp<=1
      cfp_temp = racah_cfp(n,S2,L,S2p,Lp);
      if(cfp_temp!=0.)
      {
	 entry.cfp = cfp_temp; entry.par = conf_par.states[i]; entry.ind = i;
	 cfps.push_back(entry);
      }
   }
   return cfps;
}

} // namespace libMcPhase

// --------------------------------------------------------------------------------------------------------------- //
// For testing the rest of the code! - Uncomment and compile: g++ cfp.cpp states.cpp; ./a.out
// --------------------------------------------------------------------------------------------------------------- //
/*
double sign(double val) { return val<0?-1.:1.; }
// --------------------------------------------------------------------------------------------------------------- //
// Tests the calculations of the coefficient of fractional parentage by orthonormality and Cowan's relation
// --------------------------------------------------------------------------------------------------------------- //
sMat<double> cfp_orthog_test(int n, const char* LS)
{
   fconf conf(n);
   int num_states = (int)conf.states.size();
   int i,j,k,l,stcmp,isz,jsz;
   std::vector< std::vector<cfpls> > cfps;
   double entry;

   for(i=0; i<num_states; i++)
      if(strncmp(conf.states[i].id.c_str(),LS,2)==0)
      {
         cfps.push_back(racah_parents(n,conf.states[i].v,conf.states[i].U,conf.states[i].S2,conf.states[i].L));
      }

   stcmp = (int)cfps.size();
   sMat<double> out(stcmp,stcmp);
   for(i=0; i<stcmp; i++)
      for(j=0; j<stcmp; j++)
      {
         entry = 0.;
	 isz = (int)cfps[i].size(); jsz = (int)cfps[j].size();
         for(k=0; k<isz; k++)
	    for(l=0; l<jsz; l++)
	       if(cfps[i][k].ind==cfps[j][l].ind)// entry += cfps[i][k].cfp*cfps[j][l].cfp;
	    {
	        entry += cfps[i][k].cfp*cfps[j][l].cfp;
	       //std::cout << cfps[i][k].cfp << "," << cfps[j][l].cfp << "\n";
	    }

         if(entry!=0.) out(i,j) = entry;
      }
   //std::cout << LS << ":\n" << out;
   return out;
}
sMat<double> cfp_cowan_test(int n, const char* LSp)
{  // /------------------------------------------------------------------------------------------\
   // | cfp's must satisfy this relation, from Cowan, TASS (1981), eq. 9.49:                     |
   // |                                                                                          |
   // |  ---          w-1 ___   w        w       w-1 _ __    1               _  _        __      |
   // |  >   [L][S] (l    aLS|}l  aLS) (l  aLS{|l    a'LS) = - (4l + 3 - w) [L][S] delta(aa')    |
   // |  ---                                                 w                                   |
   // |  aLS                                                                                     |
   // \__________________________________________________________________________________________/
   
   fconf conf_chl(n);
   fconf conf_par(n-1);
   int num_states_chl = (int)conf_chl.states.size();
   int num_states_par = (int)conf_par.states.size();
   int i,j,k,l,stcmp;
   std::vector<double> cfpsRow;
   std::vector< std::vector<double> > cfps;
   std::vector<orbital> Lp,Lrow;
   std::vector< std::vector<orbital> > L;
   std::vector<int> S2p,S2row;
   std::vector< std::vector<int> > S2;
   double entry;
   int LS2 = (int)LSp[0]-48;

   //std::cout << LSp << ":\n";
#define CSC conf_chl.states
#define CSP conf_par.states
   for(i=0; i<num_states_par; i++)
      if(strncmp(conf_par.states[i].id.c_str(),LSp,2)==0)
      {
         Lp.push_back(CSP[i].L); S2p.push_back(CSP[i].S2);
	 for(j=0; j<num_states_chl; j++)
	 {
            cfpsRow.push_back(racah_cfp(n,CSC[j].U,CSC[j].v,CSC[j].S2,CSC[j].L,
	                               CSP[i].U,CSP[i].v,CSP[i].S2,CSP[i].L));
            Lrow.push_back(CSC[j].L); S2row.push_back(CSC[j].S2);
	    //std::cout << CSC[j].id << "\t" << CSP[i].id << "\t" << 
	    //   racah_cfp(n,CSC[j].U,CSC[j].v,CSC[j].S2,CSC[j].L, CSP[i].U,CSP[i].v,CSP[i].S2,CSP[i].L) << "\n";
	 }
	 cfps.push_back(cfpsRow); L.push_back(Lrow); S2.push_back(S2row);
         cfpsRow.clear(); Lrow.clear(); S2row.clear();
      }

   stcmp = (int)Lp.size();
   sMat<double> out(stcmp,stcmp);
   for(i=0; i<stcmp; i++)
      for(j=0; j<stcmp; j++)
      {
         entry = 0.;
         for(k=0; k<num_states_chl; k++)
	    entry += (2.*abs(L[i][k])+1.)*(S2[i][k]+1.) * cfps[i][k]*cfps[j][k];

         if(entry!=0.) out(i,j) = entry / ( (2.*abs(Lp[i])+1.)*(S2p[i]+1.) ) / ( (1./n)*(15.-n) );
      }

   //std::cout << LSp << ":\n" << out;
   return out;
}

int main(int argc, char *argv[])
{
   int n,i,j,sz,sc;
   if(argc>1) { n = atoi(argv[1]); } else { n = 2; }
   sMat<double> cfptest;
   double elem;

   std::string el;
   std::vector<std::string> strv,LS; strv.reserve(33);
#define CSTR(str) el = str; strv.push_back(el);
   {CSTR("3P") CSTR("3F") CSTR("3H") CSTR("1S") CSTR("1D") CSTR("1G") CSTR("1I")} 
      std::vector<std::string> f2_LS = strv; strv.clear();
   {CSTR("4S") CSTR("4D") CSTR("4F") CSTR("4G") CSTR("4I") CSTR("2P") CSTR("2D") CSTR("2F") CSTR("2G") CSTR("2H") CSTR("2I") CSTR("2K") CSTR("2L")}
      std::vector<std::string> f3_LS = strv; strv.clear();
   {CSTR("5S") CSTR("5D") CSTR("5F") CSTR("5G") CSTR("5I") CSTR("3P") CSTR("3D") CSTR("3F") CSTR("3G") CSTR("3H") CSTR("3I") CSTR("3K") CSTR("3L")
    CSTR("3M") CSTR("1S") CSTR("1D") CSTR("1F") CSTR("1G") CSTR("1H") CSTR("1I") CSTR("1K") CSTR("1L") CSTR("1N")} 
      std::vector<std::string> f4_LS = strv; strv.clear();
   {CSTR("6P") CSTR("6F") CSTR("6H") CSTR("4S") CSTR("4P") CSTR("4D") CSTR("4F") CSTR("4G") CSTR("4H") CSTR("4I") CSTR("4K") CSTR("4L") CSTR("4M")
    CSTR("2P") CSTR("2D") CSTR("2F") CSTR("2G") CSTR("2H") CSTR("2I") CSTR("2K") CSTR("2L") CSTR("2M") CSTR("2N") CSTR("2O")}
      std::vector<std::string> f5_LS = strv; strv.clear();
   {CSTR("7F") CSTR("5S") CSTR("5P") CSTR("5D") CSTR("5F") CSTR("5G") CSTR("5H") CSTR("5I") CSTR("5K") CSTR("5L") CSTR("3P") CSTR("3D") CSTR("3F") 
    CSTR("3G") CSTR("3H") CSTR("3I") CSTR("3K") CSTR("3L") CSTR("3M") CSTR("3N") CSTR("3O") CSTR("1S") CSTR("1P") CSTR("1D") CSTR("1F") CSTR("1G")
    CSTR("1H") CSTR("1I") CSTR("1K") CSTR("1L") CSTR("1M") CSTR("1N") CSTR("1Q")}
      std::vector<std::string> f6_LS = strv; strv.clear();
   {CSTR("8S") CSTR("6P") CSTR("6D") CSTR("6F") CSTR("6G") CSTR("6H") CSTR("6I") CSTR("4S") CSTR("4P") CSTR("4D") CSTR("4F") CSTR("4G") CSTR("4H")
    CSTR("4I") CSTR("4K") CSTR("4L") CSTR("4M") CSTR("4N") CSTR("2S") CSTR("2P") CSTR("2D") CSTR("2F") CSTR("2G") CSTR("2H") CSTR("2I") CSTR("2K")
    CSTR("2L") CSTR("2M") CSTR("2N") CSTR("2O") CSTR("2Q")}
      std::vector<std::string> f7_LS = strv; strv.clear();

   switch(n)
   {
      case 2: LS = f2_LS; break;
      case 3: LS = f3_LS; break;
      case 4: LS = f4_LS; break;
      case 5: LS = f5_LS; break;
      case 6: LS = f6_LS; break;
      case 7: LS = f7_LS; break;
      case 8: LS = f6_LS; break;
      case 9: LS = f5_LS; break;
      case 10: LS = f4_LS; break;
      case 11: LS = f3_LS; break;
      case 12: LS = f2_LS; break;
   }

   sz = (int)LS.size();
   //for(i=0; i<sz; i++) { std::cout << LS[i] << "      "; if(n>2) std::cout << "    "; }
   //std::cout << "\n";
   for(i=0; i<sz; i++)
   {
      cfptest = cfp_orthog_test(n,LS[i].c_str()); sc = (int)cfptest.nr();
      //std::cout << cfp_orthog_test(n,LS[i].c_str());
      elem = 0.;
      for(j=0; j<sc; j++)
         elem += fabs(cfptest(j,j)-1.);
      //std::cout << "\t\t" << elem << "\n";
      //std::cout << LS[i] << ":" << elem << "\t";
      if(fabs(elem)>1e-5) std::cout << elem << "\t"; else std::cout << "0\t";
   }
   std::cout << "\n";
   
   //qG2 U(3,1); qR7 W(2,2,1); qG2 Up(2,2); qR7 Wp(2,2,0); orbital Lp=G; orbital L=K;
   //std::cout << "\n" << racah_ulf(U,L,Up,Lp);
   //std::cout << "\t" << racah_wupf(W,U,Wp,Up) << "\n";

   switch(n)
   {
      case 3: LS = f2_LS; break;
      case 4: LS = f3_LS; break;
      case 5: LS = f4_LS; break;
      case 6: LS = f5_LS; break;
      case 7: LS = f6_LS; break;
      case 8: LS = f5_LS; break;
      case 9: LS = f4_LS; break;
      case 10: LS = f3_LS; break;
      case 11: LS = f2_LS; break;
   }

   std::cout << "\n";
   sz = (int)LS.size();
   for(i=0; i<sz; i++)
   {
      cfptest = cfp_cowan_test(n,LS[i].c_str()); sc = (int)cfptest.nr();
      elem = 0.;
      for(j=0; j<sc; j++)
         elem += fabs(cfptest(j,j)-1.);
      //std::cout << LS[i] << "\t" << elem << "\n";
      //std::cout << elem << "\t";
      if(fabs(elem)>1e-5) std::cout << elem << "\t"; else std::cout << "0\t";
   }
   std::cout << "\n";

   return 0;
}
*/
